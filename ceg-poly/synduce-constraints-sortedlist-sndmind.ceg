(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Ctwo Concat))
  (:: Ctwo (-> ((Tuple2 Nat Nat)) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (data List (Two Cons))
  (:: Two (-> ((Tuple2 Nat Nat)) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Two (MakeTuple2 ?tv6 ?tv7))) (Cons (MakeTuple2 ?tv6 (Cons (MakeTuple2 ?tv7 ?tv5)))))
  (let tf1 (?tv5 (Cons (MakeTuple2 ?tv8 ?tv9))) (Cons (MakeTuple2 ?tv8 (tf0 ?tv9 ?tv5))))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Ctwo (MakeTuple2 ?tv13 ?tv14))) (Two (MakeTuple2 ?tv13 ?tv14)))
  (let tf3 ((Concat (MakeTuple2 ?tv15 ?tv16))) (cat (tf2 ?tv15) (tf2 ?tv16)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: repr (-> (CList) List))
  (let repr (?tv10) (tf2 ?tv10))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv17 ?tv18) (ite (lq ?tv17 ?tv18) ?tv17 ?tv18))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv19 ?tv20) (ite (lq ?tv19 ?tv20) ?tv20 ?tv19))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf5 (-> (List) (Tuple2 Nat Nat)))
  (let tf5 ((Two (MakeTuple2 ?tv24 ?tv25))) (MakeTuple2 (min ?tv24 ?tv25) (max ?tv24 ?tv25)))
  (let tf5 ((Cons (MakeTuple2 ?tv26 ?tv27))) (MakeTuple2 (min (fst2 (tf4 ?tv27)) ?tv26) (min (snd2 (tf4 ?tv27)) (max (fst2 (tf4 ?tv27)) ?tv26))))
  (:: tf4 (-> (List) (Tuple2 Nat Nat)))
  (let tf4 (?tv22) (tf5 ?tv22))
  (:: spec (-> (List) Nat))
  (let spec (?tv21) (snd2 (tf4 ?tv21)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: tf7 (-> (Nat List) Bool))
  (let tf7 (?tv32 (Two (MakeTuple2 ?tv33 ?tv34))) (and (gq ?tv32 ?tv33) (gq ?tv33 ?tv34)))
  (let tf7 (?tv32 (Cons (MakeTuple2 ?tv35 ?tv36))) (and (gq ?tv32 ?tv35) (tf6 ?tv35 ?tv36)))
  (:: tf6 (-> (Nat List) Bool))
  (let tf6 (?tv29 ?tv30) (tf7 ?tv29 ?tv30))
  (:: tf9 (-> (List) Bool))
  (let tf9 ((Two (MakeTuple2 ?tv38 ?tv39))) (gq ?tv38 ?tv39))
  (let tf9 ((Cons (MakeTuple2 ?tv40 ?tv41))) (tf6 ?tv40 ?tv41))
  (:: tf8 (-> (List) Bool))
  (let tf8 (?tv37) (tf9 ?tv37))
  (:: issorted (-> (List) Bool))
  (let issorted (?tv28) (tf8 ?tv28))
  (:: tf11 (-> (CList CList) CList))
  (let tf11 (?tv45 (Ctwo (MakeTuple2 ?tv46 ?tv47))) ?tv45)
  (let tf11 (?tv45 (Concat (MakeTuple2 ?tv48 ?tv49))) (Concat (MakeTuple2 ?tv48 (tf10 ?tv49))))
  (:: tf10 (-> (CList) CList))
  (let tf10 (?tv43) (tf11 ?tv43 ?tv43))
  (:: target (-> (CList) CList))
  (let target (?tv42) (tf10 ?tv42))
  (:: main (-> (CList) Nat))
  (let main (?tv50) (ite (issorted (repr ?tv50)) (spec (repr (target ?tv50))) Zero))
  (:: tf13 (-> (CList) Nat))
  (let tf13 ((Ctwo (MakeTuple2 ?tv54 ?tv55))) ?tv54)
  (let tf13 ((Concat (MakeTuple2 ?tv56 ?tv57))) (tf12 ?tv57))
  (:: tf12 (-> (CList) Nat))
  (let tf12 (?tv52) (tf13 ?tv52))
  (:: targetNew (-> (CList) Nat))
  (let targetNew (?tv51) (tf12 ?tv51))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv58) (ite (issorted (repr ?tv58)) (targetNew ?tv58) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
