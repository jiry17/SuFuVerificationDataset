(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Bool) List))
  (:: Cons (-> ((Tuple2 Bool List)) List))
  (data CList (Single Concat))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Elt ?tv6)) (Cons (MakeTuple2 ?tv6 ?tv5)))
  (let tf1 (?tv5 (Cons (MakeTuple2 ?tv7 ?tv8))) (Cons (MakeTuple2 ?tv7 (tf0 ?tv8 ?tv5))))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: catlist (-> (List List) List))
  (let catlist (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Single ?tv12)) (Elt ?tv12))
  (let tf3 ((Concat (MakeTuple2 ?tv13 ?tv14))) (catlist (tf2 ?tv13) (tf2 ?tv14)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar1))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar2))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar3))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: tf5 (-> (List) (Tuple3 Bool Bool Bool)))
  (let tf5 ((Elt ?tv18)) (MakeTuple3 ?tv18 True ?tv18))
  (let tf5 ((Cons (MakeTuple2 ?tv19 ?tv20))) (MakeTuple3 (and (fst3 (tf4 ?tv20)) ?tv19) (and (snd3 (tf4 ?tv20)) (or (fst3 (tf4 ?tv20)) (not ?tv19))) (third3 (tf4 ?tv20))))
  (:: tf4 (-> (List) (Tuple3 Bool Bool Bool)))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: spec (-> (List) Bool))
  (let spec (?tv15) (snd3 (tf4 ?tv15)))
  (:: main (-> (CList) Bool))
  (let main (?tv21) (spec (repr ?tv21)))
  (:: tf7 (-> (CList) (Tuple3 Bool Bool Bool)))
  (let tf7 ((Single ?tv25)) (MakeTuple3 True ?tv25 ?tv25))
  (let tf7 ((Concat (MakeTuple2 ?tv26 ?tv27))) (MakeTuple3 (or (and (and (not (third3 (tf6 ?tv26))) (fst3 (tf6 ?tv26))) (fst3 (tf6 ?tv27))) (and (and (fst3 (tf6 ?tv26)) (fst3 (tf6 ?tv27))) (snd3 (tf6 ?tv27)))) (snd3 (tf6 ?tv26)) (third3 (tf6 ?tv27))))
  (:: tf6 (-> (CList) (Tuple3 Bool Bool Bool)))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: reprNew (-> (CList) (Tuple3 Bool Bool Bool)))
  (let reprNew (?tv22) (tf6 ?tv22))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv28) (fst3 (reprNew ?tv28)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
