(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data BTree (Empty Node))
  (:: Empty (-> (Unit) BTree))
  (:: Node (-> ((Tuple3 Nat BTree BTree)) BTree))
  (data Zipper (Top Left Right))
  (:: Top (-> (Unit) Zipper))
  (:: Left (-> ((Tuple3 Nat BTree Zipper)) Zipper))
  (:: Right (-> ((Tuple3 Nat BTree Zipper)) Zipper))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (BTree) Nat))
  (let tf1 ((Empty ?tv5)) Zero)
  (let tf1 ((Node (MakeTuple3 ?tv6 ?tv7 ?tv8))) (plus (Succ Zero) (max (tf0 ?tv7) (tf0 ?tv8))))
  (:: tf0 (-> (BTree) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: height (-> (BTree) Nat))
  (let height (?tv2) (tf0 ?tv2))
  (:: tf3 (-> (Zipper) BTree))
  (let tf3 ((Top ?tv12)) (Empty Null))
  (let tf3 ((Left (MakeTuple3 ?tv13 ?tv14 ?tv15))) (Node (MakeTuple3 ?tv13 ?tv14 (tf2 ?tv15))))
  (let tf3 ((Right (MakeTuple3 ?tv16 ?tv17 ?tv18))) (Node (MakeTuple3 ?tv16 (tf2 ?tv18) ?tv17)))
  (:: tf2 (-> (Zipper) BTree))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (Zipper) BTree))
  (let repr (?tv9) (tf2 ?tv9))
  (:: main (-> (Zipper) Nat))
  (let main (?tv19) (height (repr ?tv19)))
  (:: tf5 (-> (Zipper) Nat))
  (let tf5 ((Top ?tv23)) Zero)
  (let tf5 ((Left (MakeTuple3 ?tv24 ?tv25 ?tv26))) (plus (Succ Zero) (max (height ?tv25) (tf4 ?tv26))))
  (let tf5 ((Right (MakeTuple3 ?tv27 ?tv28 ?tv29))) (plus (Succ Zero) (max (height ?tv28) (tf4 ?tv29))))
  (:: tf4 (-> (Zipper) Nat))
  (let tf4 (?tv21) (tf5 ?tv21))
  (:: reprNew (-> (Zipper) Nat))
  (let reprNew (?tv20) (tf4 ?tv20))
  (:: mainNew (-> (Zipper) Nat))
  (let mainNew (?tv30) (reprNew ?tv30))
  (=== optimize (inp0) (Zipper) (main inp0) (mainNew inp0))
)
