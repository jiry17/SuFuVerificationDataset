(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data BList (Nil Cons))
  (:: Nil (-> (Unit) BList))
  (:: Cons (-> ((Tuple2 Bool BList)) BList))
  (data CList (Emp Single Concat))
  (:: Emp (-> (Unit) CList))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: opor (-> (Bool Bool) Bool))
  (let opor (?tv0 ?tv1) (or ?tv0 ?tv1))
  (:: tf1 (-> (BList BList) BList))
  (let tf1 (?tv7 (Nil ?tv8)) ?tv7)
  (let tf1 (?tv7 (Cons (MakeTuple2 ?tv9 ?tv10))) (Cons (MakeTuple2 ?tv9 (tf0 ?tv10 ?tv7))))
  (:: tf0 (-> (BList BList) BList))
  (let tf0 (?tv4 ?tv5) (tf1 ?tv5 ?tv4))
  (:: catlist (-> (BList BList) BList))
  (let catlist (?tv2 ?tv3) (tf0 ?tv2 ?tv3))
  (:: tf3 (-> (CList) BList))
  (let tf3 ((Emp ?tv14)) (Nil Null))
  (let tf3 ((Single ?tv15)) (Cons (MakeTuple2 ?tv15 (Nil Null))))
  (let tf3 ((Concat (MakeTuple2 ?tv16 ?tv17))) (catlist (tf2 ?tv16) (tf2 ?tv17)))
  (:: tf2 (-> (CList) BList))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (CList) BList))
  (let repr (?tv11) (tf2 ?tv11))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (:: fst3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar1))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar2))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar3))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: tf5 (-> (BList) (Tuple3 Bool Bool Bool)))
  (let tf5 ((Nil ?tv21)) (MakeTuple3 False False False))
  (let tf5 ((Cons (MakeTuple2 ?tv22 ?tv23))) (MakeTuple3 (or (fst3 (tf4 ?tv23)) ?tv22) (or (snd3 (tf4 ?tv23)) (and (fst3 (tf4 ?tv23)) (not ?tv22))) (or (third3 (tf4 ?tv23)) (not ?tv22))))
  (:: tf4 (-> (BList) (Tuple3 Bool Bool Bool)))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: spec (-> (BList) Bool))
  (let spec (?tv18) (snd3 (tf4 ?tv18)))
  (:: main (-> (CList) Bool))
  (let main (?tv24) (spec (repr ?tv24)))
  (data Tuple4 (pvar0 pvar1 pvar2 pvar3) (MakeTuple4))
  (:: MakeTuple4 (-> (pvar0 pvar1 pvar2 pvar3) (Tuple4 pvar0 pvar1 pvar2 pvar3)))
  (:: snd4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar2))
  (let snd4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: third4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar3))
  (let third4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: fst4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar1))
  (let fst4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: fourth4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar4))
  (let fourth4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: tf7 (-> (CList) (Tuple4 Bool Bool Bool Bool)))
  (let tf7 ((Emp ?tv28)) (MakeTuple4 False True True False))
  (let tf7 ((Single ?tv29)) (MakeTuple4 False ?tv29 False False))
  (let tf7 ((Concat (MakeTuple2 ?tv30 ?tv31))) (MakeTuple4 (or (or (and (and (not (snd4 (tf6 ?tv30))) (not (third4 (tf6 ?tv31)))) (opor (fst4 (tf6 ?tv31)) (snd4 (tf6 ?tv31)))) (and (and (opor (fst4 (tf6 ?tv31)) (fourth4 (tf6 ?tv30))) (not (third4 (tf6 ?tv31)))) (opor (fst4 (tf6 ?tv31)) (snd4 (tf6 ?tv31))))) (opor (fst4 (tf6 ?tv31)) (fst4 (tf6 ?tv30)))) (or (and (snd4 (tf6 ?tv31)) (snd4 (tf6 ?tv30))) (and (snd4 (tf6 ?tv30)) (not (third4 (tf6 ?tv30))))) (and (third4 (tf6 ?tv31)) (third4 (tf6 ?tv30))) (or (or (and (and (not (snd4 (tf6 ?tv31))) (not (third4 (tf6 ?tv30)))) (opor (snd4 (tf6 ?tv31)) (snd4 (tf6 ?tv30)))) (and (and (not (snd4 (tf6 ?tv30))) (not (third4 (tf6 ?tv31)))) (opor (snd4 (tf6 ?tv31)) (fourth4 (tf6 ?tv31))))) (opor (fourth4 (tf6 ?tv31)) (fourth4 (tf6 ?tv30))))))
  (:: tf6 (-> (CList) (Tuple4 Bool Bool Bool Bool)))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CList) (Tuple4 Bool Bool Bool Bool)))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv32) (fst4 (reprNew ?tv32)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
