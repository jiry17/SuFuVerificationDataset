(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data List (Elt Cons))
  (:: Elt (-> ((Tuple2 Nat Nat)) List))
  (:: Cons (-> ((Tuple3 Nat Nat List)) List))
  (data CList (Single Concat))
  (:: Single (-> ((Tuple2 Nat Nat)) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Elt (MakeTuple2 ?tv6 ?tv7))) (Cons (MakeTuple3 ?tv6 ?tv7 ?tv5)))
  (let tf1 (?tv5 (Cons (MakeTuple3 ?tv8 ?tv9 ?tv10))) (Cons (MakeTuple3 ?tv8 ?tv9 (tf0 ?tv10 ?tv5))))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Single (MakeTuple2 ?tv14 ?tv15))) (Elt (MakeTuple2 ?tv14 ?tv15)))
  (let tf3 ((Concat (MakeTuple2 ?tv16 ?tv17))) (cat (tf2 ?tv16) (tf2 ?tv17)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (CList) List))
  (let repr (?tv11) (tf2 ?tv11))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf5 (-> (Nat List) Bool))
  (let tf5 (?tv22 (Elt (MakeTuple2 ?tv23 ?tv24))) (leq ?tv22 (plus ?tv23 ?tv24)))
  (let tf5 (?tv22 (Cons (MakeTuple3 ?tv25 ?tv26 ?tv27))) (and (leq ?tv22 (plus ?tv25 ?tv26)) (tf4 (plus ?tv25 ?tv26) ?tv27)))
  (:: tf4 (-> (Nat List) Bool))
  (let tf4 (?tv19 ?tv20) (tf5 ?tv19 ?tv20))
  (:: tf7 (-> (List) Bool))
  (let tf7 ((Elt ?tv29)) True)
  (let tf7 ((Cons (MakeTuple3 ?tv30 ?tv31 ?tv32))) (tf4 (plus ?tv30 ?tv31) ?tv32))
  (:: tf6 (-> (List) Bool))
  (let tf6 (?tv28) (tf7 ?tv28))
  (:: issorted (-> (List) Bool))
  (let issorted (?tv18) (tf6 ?tv18))
  (:: csorted (-> (CList) Bool))
  (let csorted (?tv33) (issorted (repr ?tv33)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv34 ?tv35) (ite (lq ?tv34 ?tv35) ?tv35 ?tv34))
  (:: tf9 (-> (List) Nat))
  (let tf9 ((Elt (MakeTuple2 ?tv39 ?tv40))) (plus ?tv39 ?tv40))
  (let tf9 ((Cons (MakeTuple3 ?tv41 ?tv42 ?tv43))) (max (tf8 ?tv43) (plus ?tv41 ?tv42)))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv37) (tf9 ?tv37))
  (:: spec (-> (List) Nat))
  (let spec (?tv36) (tf8 ?tv36))
  (:: tf11 (-> (CList CList) CList))
  (let tf11 (?tv47 (Single (MakeTuple2 ?tv48 ?tv49))) ?tv47)
  (let tf11 (?tv47 (Concat (MakeTuple2 ?tv50 ?tv51))) (Concat (MakeTuple2 ?tv50 (tf10 ?tv51))))
  (:: tf10 (-> (CList) CList))
  (let tf10 (?tv45) (tf11 ?tv45 ?tv45))
  (:: target (-> (CList) CList))
  (let target (?tv44) (tf10 ?tv44))
  (:: main (-> (CList) Nat))
  (let main (?tv52) (ite (csorted ?tv52) (spec (repr (target ?tv52))) Zero))
  (:: tf13 (-> (CList) Nat))
  (let tf13 ((Single (MakeTuple2 ?tv56 ?tv57))) (plus ?tv57 ?tv56))
  (let tf13 ((Concat (MakeTuple2 ?tv58 ?tv59))) (tf12 ?tv59))
  (:: tf12 (-> (CList) Nat))
  (let tf12 (?tv54) (tf13 ?tv54))
  (:: targetNew (-> (CList) Nat))
  (let targetNew (?tv53) (tf12 ?tv53))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv60) (ite (csorted ?tv60) (targetNew ?tv60) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
