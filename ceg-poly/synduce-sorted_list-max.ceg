(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf1 (-> ((-> (List) List) List Nat List) List))
  (let tf1 (?tv4 ?tv5 ?tv6 (Elt ?tv7)) (ite (lq ?tv6 ?tv7) (Cons (MakeTuple2 ?tv6 (Elt ?tv7))) (Cons (MakeTuple2 ?tv7 (Elt ?tv6)))))
  (let tf1 (?tv4 ?tv5 ?tv6 (Cons (MakeTuple2 ?tv8 ?tv9))) (ite (lq ?tv6 ?tv8) (Cons (MakeTuple2 ?tv6 ?tv5)) (Cons (MakeTuple2 ?tv8 ($ ?tv4 ?tv9)))))
  (:: tf0 (-> (Nat List) List))
  (let tf0 (?tv2 ?tv3) (tf1 (tf0 ?tv2) ?tv3 ?tv2 ?tv3))
  (:: insert (-> (Nat List) List))
  (let insert (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (List) List))
  (let tf3 ((Elt ?tv13)) (Elt ?tv13))
  (let tf3 ((Cons (MakeTuple2 ?tv14 ?tv15))) (insert ?tv14 (tf2 ?tv15)))
  (:: tf2 (-> (List) List))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: sort (-> (List) List))
  (let sort (?tv10) (tf2 ?tv10))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Elt ?tv19)) ?tv19)
  (let tf5 ((Cons (MakeTuple2 ?tv20 ?tv21))) (tf4 ?tv21))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv17) (tf5 ?tv17))
  (:: spec (-> (List) Nat))
  (let spec (?tv16) (tf4 ?tv16))
  (:: tf7 (-> (List) List))
  (let tf7 ((Elt ?tv25)) (Elt ?tv25))
  (let tf7 ((Cons (MakeTuple2 ?tv26 ?tv27))) (Cons (MakeTuple2 ?tv26 (tf6 ?tv27))))
  (:: tf6 (-> (List) List))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: target (-> (List) List))
  (let target (?tv22) (tf6 ?tv22))
  (:: main (-> (List) Nat))
  (let main (?tv28) (spec (sort (target ?tv28))))
  (:: tf9 (-> (List) Nat))
  (let tf9 ((Elt ?tv32)) ?tv32)
  (let tf9 ((Cons (MakeTuple2 ?tv33 ?tv34))) (ite (lq ?tv33 (tf8 ?tv34)) (tf8 ?tv34) ?tv33))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv30) (tf9 ?tv30))
  (:: targetNew (-> (List) Nat))
  (let targetNew (?tv29) (tf8 ?tv29))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv35) (targetNew ?tv35))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
