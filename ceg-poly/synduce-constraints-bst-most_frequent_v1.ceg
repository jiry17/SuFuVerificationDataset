(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data Unit (Null))
  (:: Null Unit)
  (data Pos (One S))
  (:: One (-> (Unit) Pos))
  (:: S (-> (Pos) Pos))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data Map (Value Node))
  (:: Value (-> ((Tuple2 Nat Pos)) Map))
  (:: Node (-> ((Tuple3 Nat Map Map)) Map))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv2 ?tv3) (ite (gq ?tv2 ?tv3) ?tv2 ?tv3))
  (:: tf1 (-> (Map) Nat))
  (let tf1 ((Value (MakeTuple2 ?tv7 ?tv8))) ?tv7)
  (let tf1 ((Node (MakeTuple3 ?tv9 ?tv10 ?tv11))) (min (tf0 ?tv10) (tf0 ?tv11)))
  (:: tf0 (-> (Map) Nat))
  (let tf0 (?tv5) (tf1 ?tv5))
  (:: minkey (-> (Map) Nat))
  (let minkey (?tv4) (tf0 ?tv4))
  (:: tf3 (-> (Map) Nat))
  (let tf3 ((Value (MakeTuple2 ?tv15 ?tv16))) ?tv15)
  (let tf3 ((Node (MakeTuple3 ?tv17 ?tv18 ?tv19))) (max (tf2 ?tv18) (tf2 ?tv19)))
  (:: tf2 (-> (Map) Nat))
  (let tf2 (?tv13) (tf3 ?tv13))
  (:: maxkey (-> (Map) Nat))
  (let maxkey (?tv12) (tf2 ?tv12))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf5 (-> (Map) Bool))
  (let tf5 ((Value (MakeTuple2 ?tv23 ?tv24))) True)
  (let tf5 ((Node (MakeTuple3 ?tv25 ?tv26 ?tv27))) (and (and (lq (maxkey ?tv26) ?tv25) (leq ?tv25 (minkey ?tv27))) (and (tf4 ?tv26) (tf4 ?tv27))))
  (:: tf4 (-> (Map) Bool))
  (let tf4 (?tv21) (tf5 ?tv21))
  (:: ismap (-> (Map) Bool))
  (let ismap (?tv20) (tf4 ?tv20))
  (:: tf7 (-> (List List) List))
  (let tf7 (?tv32 (Cons (MakeTuple2 ?tv34 ?tv35))) (Cons (MakeTuple2 ?tv34 (tf6 ?tv35 ?tv32))))
  (let tf7 (?tv32 (Elt ?tv36)) (Cons (MakeTuple2 ?tv36 ?tv32)))
  (:: tf6 (-> (List List) List))
  (let tf6 (?tv30 ?tv31) (tf7 ?tv31 ?tv30))
  (:: cat (-> (List List) List))
  (let cat (?tv28 ?tv29) (tf6 ?tv28 ?tv29))
  (:: tf9 (-> ((-> (Pos) List) Nat Pos) List))
  (let tf9 (?tv41 ?tv42 (One ?tv43)) (Elt ?tv42))
  (let tf9 (?tv41 ?tv42 (S ?tv44)) (Cons (MakeTuple2 ?tv42 ($ ?tv41 ?tv44))))
  (:: tf8 (-> (Nat Pos) List))
  (let tf8 (?tv39 ?tv40) (tf9 (tf8 ?tv39) ?tv39 ?tv40))
  (:: repeat (-> (Nat Pos) List))
  (let repeat (?tv37 ?tv38) (tf8 ?tv37 ?tv38))
  (:: tf11 (-> (Map) List))
  (let tf11 ((Value (MakeTuple2 ?tv48 ?tv49))) (repeat ?tv48 ?tv49))
  (let tf11 ((Node (MakeTuple3 ?tv50 ?tv51 ?tv52))) (cat (tf10 ?tv51) (tf10 ?tv52)))
  (:: tf10 (-> (Map) List))
  (let tf10 (?tv46) (tf11 ?tv46))
  (:: repr (-> (Map) List))
  (let repr (?tv45) (tf10 ?tv45))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf13 (-> ((-> (List) Nat) Nat List) Nat))
  (let tf13 (?tv57 ?tv58 (Elt ?tv59)) (ite (nateq ?tv59 ?tv58) (Succ Zero) Zero))
  (let tf13 (?tv57 ?tv58 (Cons (MakeTuple2 ?tv60 ?tv61))) (plus (ite (nateq ?tv60 ?tv58) (Succ Zero) Zero) ($ ?tv57 ?tv61)))
  (:: tf12 (-> (Nat List) Nat))
  (let tf12 (?tv55 ?tv56) (tf13 (tf12 ?tv55) ?tv55 ?tv56))
  (:: count (-> (Nat List) Nat))
  (let count (?tv53 ?tv54) (tf12 ?tv53 ?tv54))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf15 (-> (List List) (Tuple2 Nat Nat)))
  (let tf15 (?tv64 (Elt ?tv66)) (MakeTuple2 (Succ Zero) ?tv66))
  (let tf15 (?tv64 (Cons (MakeTuple2 ?tv67 ?tv68))) (ite (gq (count ?tv67 ?tv64) (fst2 (tf14 ?tv68))) (MakeTuple2 (count ?tv67 ?tv64) ?tv67) (tf14 ?tv68)))
  (:: tf14 (-> (List) (Tuple2 Nat Nat)))
  (let tf14 (?tv63) (tf15 ?tv63 ?tv63))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Nat))
  (let spec (?tv62) (snd2 (tf14 ?tv62)))
  (:: tf17 (-> (Pos) Nat))
  (let tf17 ((One ?tv72)) (Succ Zero))
  (let tf17 ((S ?tv73)) (plus (Succ Zero) (tf16 ?tv73)))
  (:: tf16 (-> (Pos) Nat))
  (let tf16 (?tv70) (tf17 ?tv70))
  (:: p2i (-> (Pos) Nat))
  (let p2i (?tv69) (tf16 ?tv69))
  (:: tf19 (-> (Map) Map))
  (let tf19 ((Value (MakeTuple2 ?tv77 ?tv78))) (Value (MakeTuple2 ?tv77 ?tv78)))
  (let tf19 ((Node (MakeTuple3 ?tv79 ?tv80 ?tv81))) (Node (MakeTuple3 ?tv79 (tf18 ?tv80) (tf18 ?tv81))))
  (:: tf18 (-> (Map) Map))
  (let tf18 (?tv75) (tf19 ?tv75))
  (:: target (-> (Map) Map))
  (let target (?tv74) (tf18 ?tv74))
  (:: main (-> (Map) Nat))
  (let main (?tv82) (ite (ismap ?tv82) (spec (repr (target ?tv82))) Zero))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: third3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar3))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: fst3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar1))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar2))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: tf21 (-> (Map) (Tuple3 Nat Nat Nat)))
  (let tf21 ((Value (MakeTuple2 ?tv86 ?tv87))) (MakeTuple3 ?tv86 ?tv86 (p2i ?tv87)))
  (let tf21 ((Node (MakeTuple3 ?tv88 ?tv89 ?tv90))) (MakeTuple3 (ite (or (and (lq (third3 (tf20 ?tv90)) (third3 (tf20 ?tv89))) (nateq (fst3 (tf20 ?tv90)) (snd3 (tf20 ?tv90)))) (and (lq (fst3 (tf20 ?tv89)) (snd3 (tf20 ?tv89))) (nateq (third3 (tf20 ?tv90)) (third3 (tf20 ?tv89))))) (fst3 (tf20 ?tv89)) (fst3 (tf20 ?tv90))) (snd3 (tf20 ?tv90)) (third3 (tf20 ?tv90))))
  (:: tf20 (-> (Map) (Tuple3 Nat Nat Nat)))
  (let tf20 (?tv84) (tf21 ?tv84))
  (:: targetNew (-> (Map) (Tuple3 Nat Nat Nat)))
  (let targetNew (?tv83) (tf20 ?tv83))
  (:: mainNew (-> (Map) Nat))
  (let mainNew (?tv91) (ite (ismap ?tv91) (fst3 (targetNew ?tv91)) Zero))
  (=== optimize (inp0) (Map) (main inp0) (mainNew inp0))
)
