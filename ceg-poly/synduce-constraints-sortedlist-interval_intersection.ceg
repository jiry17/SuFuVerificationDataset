(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data List (Elt Cons))
  (:: Elt (-> ((Tuple2 Nat Nat)) List))
  (:: Cons (-> ((Tuple3 Nat Nat List)) List))
  (:: tf0 (-> (List) (Tuple2 Nat Nat)))
  (let tf0 ((Elt (MakeTuple2 ?tv1 ?tv2))) (MakeTuple2 ?tv1 ?tv2))
  (let tf0 ((Cons (MakeTuple3 ?tv3 ?tv4 ?tv5))) (MakeTuple2 ?tv3 ?tv4))
  (:: head (-> (List) (Tuple2 Nat Nat)))
  (let head (?tv0) (tf0 ?tv0))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf2 (-> (List) Bool))
  (let tf2 ((Elt (MakeTuple2 ?tv9 ?tv10))) (lq ?tv9 ?tv10))
  (let tf2 ((Cons (MakeTuple3 ?tv11 ?tv12 ?tv13))) (and (lq ?tv11 ?tv12) (and (lq ?tv11 (fst2 (head ?tv13))) (tf1 ?tv13))))
  (:: tf1 (-> (List) Bool))
  (let tf1 (?tv7) (tf2 ?tv7))
  (:: sorted (-> (List) Bool))
  (let sorted (?tv6) (tf1 ?tv6))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: tf4 (-> ((-> (List) Bool) Nat Nat List) Bool))
  (let tf4 (?tv20 ?tv21 ?tv22 (Elt (MakeTuple2 ?tv23 ?tv24))) (and (not (lq ?tv22 ?tv23)) (not (gq ?tv21 ?tv24))))
  (let tf4 (?tv20 ?tv21 ?tv22 (Cons (MakeTuple3 ?tv25 ?tv26 ?tv27))) (or ($ ?tv20 ?tv27) (and (not (lq ?tv22 ?tv25)) (not (gq ?tv21 ?tv26)))))
  (:: tf3 (-> (Nat Nat List) Bool))
  (let tf3 (?tv17 ?tv18 ?tv19) (tf4 (tf3 ?tv17 ?tv18) ?tv17 ?tv18 ?tv19))
  (:: inter (-> (Nat Nat List) Bool))
  (let inter (?tv14 ?tv15 ?tv16) (tf3 ?tv14 ?tv15 ?tv16))
  (:: fst3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar1))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: tf6 (-> (List) (Tuple3 Bool Nat Nat)))
  (let tf6 ((Elt (MakeTuple2 ?tv31 ?tv32))) (MakeTuple3 False ?tv31 ?tv32))
  (let tf6 ((Cons (MakeTuple3 ?tv33 ?tv34 ?tv35))) (MakeTuple3 (or (fst3 (tf5 ?tv35)) (inter ?tv33 ?tv34 ?tv35)) ?tv33 ?tv34))
  (:: tf5 (-> (List) (Tuple3 Bool Nat Nat)))
  (let tf5 (?tv29) (tf6 ?tv29))
  (:: spec (-> (List) Bool))
  (let spec (?tv28) (fst3 (tf5 ?tv28)))
  (:: tf8 (-> (List List) List))
  (let tf8 (?tv39 (Elt ?tv40)) ?tv39)
  (let tf8 (?tv39 (Cons (MakeTuple3 ?tv41 ?tv42 ?tv43))) (Cons (MakeTuple3 ?tv41 ?tv42 (tf7 ?tv43))))
  (:: tf7 (-> (List) List))
  (let tf7 (?tv37) (tf8 ?tv37 ?tv37))
  (:: target (-> (List) List))
  (let target (?tv36) (tf7 ?tv36))
  (:: ite (-> (Bool pvar0) pvar0))
  (let ite (True ?x) ?x)
  (let ite (False ?x) False)
  (:: main (-> (List) Bool))
  (let main (?tv44) (ite (sorted ?tv44) (spec (target ?tv44))))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf10 (-> (List List) (Tuple2 Bool Nat)))
  (let tf10 (?tv48 (Elt ?tv49)) (MakeTuple2 False (fst2 (head ?tv48))))
  (let tf10 (?tv48 (Cons (MakeTuple3 ?tv50 ?tv51 ?tv52))) (MakeTuple2 (or (leq (snd2 (tf9 ?tv52)) ?tv51) (fst2 (tf9 ?tv52))) ?tv50))
  (:: tf9 (-> (List) (Tuple2 Bool Nat)))
  (let tf9 (?tv46) (tf10 ?tv46 ?tv46))
  (:: targetNew (-> (List) (Tuple2 Bool Nat)))
  (let targetNew (?tv45) (tf9 ?tv45))
  (:: mainNew (-> (List) Bool))
  (let mainNew (?tv53) (ite (sorted ?tv53) (fst2 (targetNew ?tv53))))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
