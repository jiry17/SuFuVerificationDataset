(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons (MakeTuple2 ?tv6 ?tv7))) (Cons (MakeTuple2 ?tv6 (tf0 ?tv7))))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (mts (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv10 ?tv11) (ite (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf4 (-> (List) (Tuple2 Nat Nat)))
  (let tf4 ((Nil ?tv15)) (MakeTuple2 Zero Zero))
  (let tf4 ((Cons (MakeTuple2 ?tv16 ?tv17))) (MakeTuple2 (max (plus (snd2 (tf3 ?tv17)) ?tv16) (fst2 (tf3 ?tv17))) (plus (snd2 (tf3 ?tv17)) ?tv16)))
  (:: tf3 (-> (List) (Tuple2 Nat Nat)))
  (let tf3 (?tv13) (tf4 ?tv13))
  (:: mts (-> (List) Nat))
  (let mts (?tv12) (fst2 (tf3 ?tv12)))
  (:: main (-> (List) Nat))
  (let main (?tv18) (singlepass ?tv18))
  (:: tf6 (-> (List) (Tuple2 Nat Nat)))
  (let tf6 ((Nil ?tv23)) (MakeTuple2 Zero Zero))
  (let tf6 ((Cons (MakeTuple2 ?tv24 ?tv25))) (MakeTuple2 (ite (lq (plus ?tv24 (snd2 (tf5 ?tv25))) (fst2 (tf5 ?tv25))) (fst2 (tf5 ?tv25)) (plus ?tv24 (snd2 (tf5 ?tv25)))) (plus ?tv24 (snd2 (tf5 ?tv25)))))
  (:: tf5 (-> (List) (Tuple2 Nat Nat)))
  (let tf5 (?tv21) (tf6 ?tv21))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv26) (fst2 (tf5 ?tv26)))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv20) (tf7 ?tv20))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv27) (singlepassNew ?tv27))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
