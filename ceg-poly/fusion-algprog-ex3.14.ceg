(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Tree (Tip Bin))
  (:: Tip (-> (Nat) Tree))
  (:: Bin (-> ((Tuple2 Tree Tree)) Tree))
  (data PTree (Ptip Pbin))
  (:: Ptip (-> ((Tuple2 Nat Nat)) PTree))
  (:: Pbin (-> ((Tuple2 PTree PTree)) PTree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (PTree) PTree))
  (let tf3 ((Ptip (MakeTuple2 ?tv8 ?tv9))) (Ptip (MakeTuple2 (plus ?tv8 (Succ Zero)) ?tv9)))
  (let tf3 ((Pbin (MakeTuple2 ?tv10 ?tv11))) (Pbin (MakeTuple2 (tf2 ?tv10) (tf2 ?tv11))))
  (:: tf2 (-> (PTree) PTree))
  (let tf2 (?tv6) (tf3 ?tv6))
  (:: tf1 (-> (Tree) PTree))
  (let tf1 ((Tip ?tv3)) (Ptip (MakeTuple2 Zero ?tv3)))
  (let tf1 ((Bin (MakeTuple2 ?tv4 ?tv5))) (Pbin (MakeTuple2 (tf2 (tf0 ?tv4)) (tf2 (tf0 ?tv5)))))
  (:: tf0 (-> (Tree) PTree))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: tri (-> (Tree) PTree))
  (let tri (?tv0) (tf0 ?tv0))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf5 (-> (PTree) Nat))
  (let tf5 ((Ptip (MakeTuple2 ?tv15 ?tv16))) (times ?tv15 ?tv16))
  (let tf5 ((Pbin (MakeTuple2 ?tv17 ?tv18))) (plus (tf4 ?tv17) (tf4 ?tv18)))
  (:: tf4 (-> (PTree) Nat))
  (let tf4 (?tv13) (tf5 ?tv13))
  (:: tsum (-> (PTree) Nat))
  (let tsum (?tv12) (tf4 ?tv12))
  (:: main (-> (Tree) Nat))
  (let main (?tv19) (tsum (tri ?tv19)))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (Tree) (Tuple2 Nat Nat)))
  (let tf7 ((Tip ?tv23)) (MakeTuple2 Zero ?tv23))
  (let tf7 ((Bin (MakeTuple2 ?tv24 ?tv25))) (MakeTuple2 (plus (plus (plus (fst2 (tf6 ?tv24)) (snd2 (tf6 ?tv24))) (fst2 (tf6 ?tv25))) (snd2 (tf6 ?tv25))) (plus (snd2 (tf6 ?tv24)) (snd2 (tf6 ?tv25)))))
  (:: tf6 (-> (Tree) (Tuple2 Nat Nat)))
  (let tf6 (?tv21) (tf7 ?tv21))
  (:: triNew (-> (Tree) (Tuple2 Nat Nat)))
  (let triNew (?tv20) (tf6 ?tv20))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv26) (fst2 (triNew ?tv26)))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
