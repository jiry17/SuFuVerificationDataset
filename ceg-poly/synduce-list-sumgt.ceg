(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf1 (-> ((-> (List) Nat) Nat List) Nat))
  (let tf1 (?tv4 ?tv5 (Nil ?tv6)) Zero)
  (let tf1 (?tv4 ?tv5 (Cons (MakeTuple2 ?tv7 ?tv8))) (plus (ite (gq ?tv7 ?tv5) ?tv7 Zero) ($ ?tv4 ?tv8)))
  (:: tf0 (-> (Nat List) Nat))
  (let tf0 (?tv2 ?tv3) (tf1 (tf0 ?tv2) ?tv2 ?tv3))
  (:: spec (-> (Nat List) Nat))
  (let spec (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv14 (Nil ?tv15)) ?tv14)
  (let tf3 (?tv14 (Cons (MakeTuple2 ?tv16 ?tv17))) (Cons (MakeTuple2 ?tv16 (tf2 ?tv17 ?tv14))))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv11 ?tv12) (tf3 ?tv12 ?tv11))
  (:: cat (-> (List List) List))
  (let cat (?tv9 ?tv10) (tf2 ?tv9 ?tv10))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Cnil ?tv21)) (Nil Null))
  (let tf5 ((Single ?tv22)) (Cons (MakeTuple2 ?tv22 (Nil Null))))
  (let tf5 ((Concat (MakeTuple2 ?tv23 ?tv24))) (cat (tf4 ?tv23) (tf4 ?tv24)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: repr (-> (CList) List))
  (let repr (?tv18) (tf4 ?tv18))
  (:: main (-> (Nat CList) Nat))
  (let main (?tv25 ?tv26) (spec ?tv25 (repr ?tv26)))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf7 (-> ((-> (CList) Nat) Nat CList) Nat))
  (let tf7 (?tv31 ?tv32 (Cnil ?tv33)) Zero)
  (let tf7 (?tv31 ?tv32 (Single ?tv34)) (ite (leq ?tv34 ?tv32) Zero ?tv34))
  (let tf7 (?tv31 ?tv32 (Concat (MakeTuple2 ?tv35 ?tv36))) (plus ($ ?tv31 ?tv36) ($ ?tv31 ?tv35)))
  (:: tf6 (-> (Nat CList) Nat))
  (let tf6 (?tv29 ?tv30) (tf7 (tf6 ?tv29) ?tv29 ?tv30))
  (:: reprNew (-> (Nat CList) Nat))
  (let reprNew (?tv27 ?tv28) (tf6 ?tv27 ?tv28))
  (:: mainNew (-> (Nat CList) Nat))
  (let mainNew (?tv37 ?tv38) (reprNew ?tv37 ?tv38))
  (=== optimize (inp0 inp1) (Nat CList) (main inp0 inp1) (mainNew inp0 inp1))
)
