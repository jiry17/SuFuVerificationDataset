(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf2 (-> ((-> (List) Bool) Nat List) Bool))
  (let tf2 (?tv4 ?tv5 (Nil ?tv6)) True)
  (let tf2 (?tv4 ?tv5 (Cons (MakeTuple2 ?tv7 ?tv8))) (and (not (nateq ?tv7 ?tv5)) ($ ?tv4 ?tv8)))
  (:: tf1 (-> (Nat List) Bool))
  (let tf1 (?tv2 ?tv3) (tf2 (tf1 ?tv2) ?tv2 ?tv3))
  (:: tf0 (-> (Nat) (-> (List) Bool)))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: tf4 (-> (List) Bool))
  (let tf4 ((Nil ?tv11)) True)
  (let tf4 ((Cons (MakeTuple2 ?tv12 ?tv13))) (and ($ (tf0 ?tv12) ?tv13) (tf3 ?tv13)))
  (:: tf3 (-> (List) Bool))
  (let tf3 (?tv9) (tf4 ?tv9))
  (:: isunique (-> (List) Bool))
  (let isunique (?tv0) (tf3 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf6 (-> ((-> (List) Nat) Nat List) Nat))
  (let tf6 (?tv18 ?tv19 (Nil ?tv20)) Zero)
  (let tf6 (?tv18 ?tv19 (Cons (MakeTuple2 ?tv21 ?tv22))) (ite (nateq ?tv21 ?tv19) (plus ?tv21 ($ ?tv18 ?tv22)) ($ ?tv18 ?tv22)))
  (:: tf5 (-> (Nat List) Nat))
  (let tf5 (?tv16 ?tv17) (tf6 (tf5 ?tv16) ?tv16 ?tv17))
  (:: spec (-> (Nat List) Nat))
  (let spec (?tv14 ?tv15) (tf5 ?tv14 ?tv15))
  (:: tf8 (-> ((-> (List) List) Nat List) List))
  (let tf8 (?tv27 ?tv28 (Nil ?tv29)) (Nil Null))
  (let tf8 (?tv27 ?tv28 (Cons (MakeTuple2 ?tv30 ?tv31))) (ite (nateq ?tv30 ?tv28) (Cons (MakeTuple2 ?tv30 ?tv31)) (Cons (MakeTuple2 ?tv30 ($ ?tv27 ?tv31)))))
  (:: tf7 (-> (Nat List) List))
  (let tf7 (?tv25 ?tv26) (tf8 (tf7 ?tv25) ?tv25 ?tv26))
  (:: target (-> (Nat List) List))
  (let target (?tv23 ?tv24) (tf7 ?tv23 ?tv24))
  (:: main (-> (Nat List) Nat))
  (let main (?tv32 ?tv33) (ite (isunique ?tv33) (spec ?tv32 (target ?tv32 ?tv33)) Zero))
  (:: tf10 (-> ((-> (List) Nat) Nat List) Nat))
  (let tf10 (?tv38 ?tv39 (Nil ?tv40)) Zero)
  (let tf10 (?tv38 ?tv39 (Cons (MakeTuple2 ?tv41 ?tv42))) (ite (nateq ?tv41 ?tv39) ?tv41 ($ ?tv38 ?tv42)))
  (:: tf9 (-> (Nat List) Nat))
  (let tf9 (?tv36 ?tv37) (tf10 (tf9 ?tv36) ?tv36 ?tv37))
  (:: targetNew (-> (Nat List) Nat))
  (let targetNew (?tv34 ?tv35) (tf9 ?tv34 ?tv35))
  (:: mainNew (-> (Nat List) Nat))
  (let mainNew (?tv43 ?tv44) (ite (isunique ?tv44) (targetNew ?tv43 ?tv44) Zero))
  (=== optimize (inp0 inp1) (Nat List) (main inp0 inp1) (mainNew inp0 inp1))
)
