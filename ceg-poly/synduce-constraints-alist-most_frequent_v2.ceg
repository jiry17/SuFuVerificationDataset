(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data Unit (Null))
  (:: Null Unit)
  (data Pos (One S))
  (:: One (-> (Unit) Pos))
  (:: S (-> (Pos) Pos))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data AList (Aelt Acons))
  (:: Aelt (-> ((Tuple2 Nat Pos)) AList))
  (:: Acons (-> ((Tuple3 Nat Pos AList)) AList))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf2 (-> ((-> (AList) Bool) Nat AList) Bool))
  (let tf2 (?tv4 ?tv5 (Aelt (MakeTuple2 ?tv6 ?tv7))) (not (nateq ?tv6 ?tv5)))
  (let tf2 (?tv4 ?tv5 (Acons (MakeTuple3 ?tv8 ?tv9 ?tv10))) (and (not (nateq ?tv8 ?tv5)) ($ ?tv4 ?tv10)))
  (:: tf1 (-> (Nat AList) Bool))
  (let tf1 (?tv2 ?tv3) (tf2 (tf1 ?tv2) ?tv2 ?tv3))
  (:: tf0 (-> (Nat) (-> (AList) Bool)))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: tf4 (-> (AList) Bool))
  (let tf4 ((Aelt ?tv13)) True)
  (let tf4 ((Acons (MakeTuple3 ?tv14 ?tv15 ?tv16))) (and ($ (tf0 ?tv14) ?tv16) (tf3 ?tv16)))
  (:: tf3 (-> (AList) Bool))
  (let tf3 (?tv11) (tf4 ?tv11))
  (:: isunique (-> (AList) Bool))
  (let isunique (?tv0) (tf3 ?tv0))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv17 ?tv18) (ite (lq ?tv17 ?tv18) ?tv18 ?tv17))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf6 (-> ((-> (List) Nat) Nat List) Nat))
  (let tf6 (?tv23 ?tv24 (Elt ?tv25)) (ite (nateq ?tv25 ?tv24) (Succ Zero) Zero))
  (let tf6 (?tv23 ?tv24 (Cons (MakeTuple2 ?tv26 ?tv27))) (plus (ite (nateq ?tv26 ?tv24) (Succ Zero) Zero) ($ ?tv23 ?tv27)))
  (:: tf5 (-> (Nat List) Nat))
  (let tf5 (?tv21 ?tv22) (tf6 (tf5 ?tv21) ?tv21 ?tv22))
  (:: count (-> (Nat List) Nat))
  (let count (?tv19 ?tv20) (tf5 ?tv19 ?tv20))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf8 (-> (List List) (Tuple2 Nat Nat)))
  (let tf8 (?tv30 (Elt ?tv32)) (MakeTuple2 (Succ Zero) ?tv32))
  (let tf8 (?tv30 (Cons (MakeTuple2 ?tv33 ?tv34))) (ite (gq (count ?tv33 ?tv30) (fst2 (tf7 ?tv34))) (MakeTuple2 (count ?tv33 ?tv30) ?tv33) (tf7 ?tv34)))
  (:: tf7 (-> (List) (Tuple2 Nat Nat)))
  (let tf7 (?tv29) (tf8 ?tv29 ?tv29))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: spec (-> (List) Nat))
  (let spec (?tv28) (snd2 (tf7 ?tv28)))
  (:: tf11 (-> ((-> (Pos) List) List Nat Pos) List))
  (let tf11 (?tv41 ?tv42 ?tv43 (One ?tv44)) (Cons (MakeTuple2 ?tv43 ?tv42)))
  (let tf11 (?tv41 ?tv42 ?tv43 (S ?tv45)) (Cons (MakeTuple2 ?tv43 ($ ?tv41 ?tv45))))
  (:: tf10 (-> (List Nat Pos) List))
  (let tf10 (?tv38 ?tv39 ?tv40) (tf11 (tf10 ?tv38 ?tv39) ?tv38 ?tv39 ?tv40))
  (:: tf9 (-> (Nat List) (-> (Pos) List)))
  (let tf9 (?tv36 ?tv37) (tf10 ?tv37 ?tv36))
  (:: tf14 (-> ((-> (Pos) List) Nat Pos) List))
  (let tf14 (?tv49 ?tv50 (One ?tv51)) (Elt ?tv50))
  (let tf14 (?tv49 ?tv50 (S ?tv52)) (Cons (MakeTuple2 ?tv50 ($ ?tv49 ?tv52))))
  (:: tf13 (-> (Nat Pos) List))
  (let tf13 (?tv47 ?tv48) (tf14 (tf13 ?tv47) ?tv47 ?tv48))
  (:: tf12 (-> (Nat) (-> (Pos) List)))
  (let tf12 (?tv46) (tf13 ?tv46))
  (:: tf16 (-> (AList) List))
  (let tf16 ((Aelt (MakeTuple2 ?tv55 ?tv56))) ($ (tf12 ?tv55) ?tv56))
  (let tf16 ((Acons (MakeTuple3 ?tv57 ?tv58 ?tv59))) ($ (tf9 ?tv57 (tf15 ?tv59)) ?tv58))
  (:: tf15 (-> (AList) List))
  (let tf15 (?tv53) (tf16 ?tv53))
  (:: repr (-> (AList) List))
  (let repr (?tv35) (tf15 ?tv35))
  (:: tf18 (-> (Pos) Nat))
  (let tf18 ((One ?tv63)) (Succ Zero))
  (let tf18 ((S ?tv64)) (plus (Succ Zero) (tf17 ?tv64)))
  (:: tf17 (-> (Pos) Nat))
  (let tf17 (?tv61) (tf18 ?tv61))
  (:: p2i (-> (Pos) Nat))
  (let p2i (?tv60) (tf17 ?tv60))
  (:: tf20 (-> (AList AList) AList))
  (let tf20 (?tv68 (Aelt (MakeTuple2 ?tv69 ?tv70))) ?tv68)
  (let tf20 (?tv68 (Acons (MakeTuple3 ?tv71 ?tv72 ?tv73))) (Acons (MakeTuple3 ?tv71 ?tv72 (tf19 ?tv73))))
  (:: tf19 (-> (AList) AList))
  (let tf19 (?tv66) (tf20 ?tv66 ?tv66))
  (:: target (-> (AList) AList))
  (let target (?tv65) (tf19 ?tv65))
  (:: main (-> (AList) Nat))
  (let main (?tv74) (ite (isunique ?tv74) (spec (repr (target ?tv74))) Zero))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf22 (-> (AList) (Tuple2 Nat Nat)))
  (let tf22 ((Aelt (MakeTuple2 ?tv78 ?tv79))) (MakeTuple2 ?tv78 (p2i ?tv79)))
  (let tf22 ((Acons (MakeTuple3 ?tv80 ?tv81 ?tv82))) (MakeTuple2 (ite (leq (p2i ?tv81) (snd2 (tf21 ?tv82))) (fst2 (tf21 ?tv82)) ?tv80) (max (p2i ?tv81) (snd2 (tf21 ?tv82)))))
  (:: tf21 (-> (AList) (Tuple2 Nat Nat)))
  (let tf21 (?tv76) (tf22 ?tv76))
  (:: targetNew (-> (AList) (Tuple2 Nat Nat)))
  (let targetNew (?tv75) (tf21 ?tv75))
  (:: mainNew (-> (AList) Nat))
  (let mainNew (?tv83) (ite (isunique ?tv83) (fst2 (targetNew ?tv83)) Zero))
  (=== optimize (inp0) (AList) (main inp0) (mainNew inp0))
)
