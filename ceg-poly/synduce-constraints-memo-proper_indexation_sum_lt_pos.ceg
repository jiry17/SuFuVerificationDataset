(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data IDList (Inil Icons))
  (:: Inil (-> (Unit) IDList))
  (:: Icons (-> ((Tuple3 Nat Nat IDList)) IDList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (IDList) Nat))
  (let tf1 ((Inil ?tv3)) Zero)
  (let tf1 ((Icons (MakeTuple3 ?tv4 ?tv5 ?tv6))) (plus (Succ Zero) (tf0 ?tv6)))
  (:: tf0 (-> (IDList) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: length (-> (IDList) Nat))
  (let length (?tv0) (tf0 ?tv0))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf3 (-> (IDList) Bool))
  (let tf3 ((Inil ?tv10)) True)
  (let tf3 ((Icons (MakeTuple3 ?tv11 ?tv12 ?tv13))) (and (tf2 ?tv13) (nateq ?tv12 (length ?tv13))))
  (:: tf2 (-> (IDList) Bool))
  (let tf2 (?tv8) (tf3 ?tv8))
  (:: isindexed (-> (IDList) Bool))
  (let isindexed (?tv7) (tf2 ?tv7))
  (:: tf5 (-> (IDList) List))
  (let tf5 ((Inil ?tv17)) (Nil Null))
  (let tf5 ((Icons (MakeTuple3 ?tv18 ?tv19 ?tv20))) (Cons (MakeTuple2 ?tv18 (tf4 ?tv20))))
  (:: tf4 (-> (IDList) List))
  (let tf4 (?tv15) (tf5 ?tv15))
  (:: repr (-> (IDList) List))
  (let repr (?tv14) (tf4 ?tv14))
  (:: tf7 (-> (List) Nat))
  (let tf7 ((Nil ?tv24)) Zero)
  (let tf7 ((Cons (MakeTuple2 ?tv25 ?tv26))) (plus (Succ Zero) (tf6 ?tv26)))
  (:: tf6 (-> (List) Nat))
  (let tf6 (?tv22) (tf7 ?tv22))
  (:: len (-> (List) Nat))
  (let len (?tv21) (tf6 ?tv21))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf9 (-> (List) Nat))
  (let tf9 ((Nil ?tv30)) Zero)
  (let tf9 ((Cons (MakeTuple2 ?tv31 ?tv32))) (ite (gq ?tv31 (len ?tv32)) (plus ?tv31 (tf8 ?tv32)) (tf8 ?tv32)))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv28) (tf9 ?tv28))
  (:: spec (-> (List) Nat))
  (let spec (?tv27) (tf8 ?tv27))
  (:: tf11 (-> (IDList IDList) IDList))
  (let tf11 (?tv36 (Inil ?tv37)) ?tv36)
  (let tf11 (?tv36 (Icons (MakeTuple3 ?tv38 ?tv39 ?tv40))) (Icons (MakeTuple3 ?tv38 ?tv39 (tf10 ?tv40))))
  (:: tf10 (-> (IDList) IDList))
  (let tf10 (?tv34) (tf11 ?tv34 ?tv34))
  (:: target (-> (IDList) IDList))
  (let target (?tv33) (tf10 ?tv33))
  (:: main (-> (IDList) Nat))
  (let main (?tv41) (ite (isindexed ?tv41) (spec (repr (target ?tv41))) Zero))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf13 (-> (IDList) (Tuple2 Nat Nat)))
  (let tf13 ((Inil ?tv45)) (MakeTuple2 Zero Zero))
  (let tf13 ((Icons (MakeTuple3 ?tv46 ?tv47 ?tv48))) (MakeTuple2 (ite (leq ?tv46 (snd2 (tf12 ?tv48))) (fst2 (tf12 ?tv48)) (plus ?tv46 (fst2 (tf12 ?tv48)))) (plus (snd2 (tf12 ?tv48)) (Succ Zero))))
  (:: tf12 (-> (IDList) (Tuple2 Nat Nat)))
  (let tf12 (?tv43) (tf13 ?tv43))
  (:: targetNew (-> (IDList) (Tuple2 Nat Nat)))
  (let targetNew (?tv42) (tf12 ?tv42))
  (:: mainNew (-> (IDList) Nat))
  (let mainNew (?tv49) (ite (isindexed ?tv49) (fst2 (targetNew ?tv49)) Zero))
  (=== optimize (inp0) (IDList) (main inp0) (mainNew inp0))
)
