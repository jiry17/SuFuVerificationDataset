(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar1))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar2))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: third3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar3))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: tf1 (-> (List) (Tuple3 Nat Nat Nat)))
  (let tf1 ((Nil ?tv5)) (MakeTuple3 Zero Zero Zero))
  (let tf1 ((Cons (MakeTuple2 ?tv6 ?tv7))) (MakeTuple3 (plus ?tv6 (fst3 (tf0 ?tv7))) (max Zero (plus ?tv6 (snd3 (tf0 ?tv7)))) (max (third3 (tf0 ?tv7)) (plus ?tv6 (fst3 (tf0 ?tv7))))))
  (:: tf0 (-> (List) (Tuple3 Nat Nat Nat)))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: spec (-> (List) (Tuple2 Nat Nat)))
  (let spec (?tv2) (MakeTuple2 (snd3 (tf0 ?tv2)) (third3 (tf0 ?tv2))))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Nil ?tv14)) ?tv13)
  (let tf3 (?tv13 (Cons (MakeTuple2 ?tv15 ?tv16))) (Cons (MakeTuple2 ?tv15 (tf2 ?tv16 ?tv13))))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: cat (-> (List List) List))
  (let cat (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Cnil ?tv20)) (Nil Null))
  (let tf5 ((Single ?tv21)) (Cons (MakeTuple2 ?tv21 (Nil Null))))
  (let tf5 ((Concat (MakeTuple2 ?tv22 ?tv23))) (cat (tf4 ?tv22) (tf4 ?tv23)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) (Tuple2 Nat Nat)))
  (let main (?tv24) (spec (repr ?tv24)))
  (:: tf7 (-> (CList) (Tuple3 Nat Nat Nat)))
  (let tf7 ((Cnil ?tv28)) (MakeTuple3 Zero Zero Zero))
  (let tf7 ((Single ?tv29)) (MakeTuple3 (max ?tv29 Zero) (ite (lq ?tv29 Zero) Zero ?tv29) ?tv29))
  (let tf7 ((Concat (MakeTuple2 ?tv30 ?tv31))) (MakeTuple3 (max (fst3 (tf6 ?tv30)) (plus (fst3 (tf6 ?tv31)) (third3 (tf6 ?tv30)))) (ite (lq (plus (third3 (tf6 ?tv31)) (snd3 (tf6 ?tv30))) (snd3 (tf6 ?tv31))) (snd3 (tf6 ?tv31)) (plus (third3 (tf6 ?tv31)) (snd3 (tf6 ?tv30)))) (plus (third3 (tf6 ?tv31)) (third3 (tf6 ?tv30)))))
  (:: tf6 (-> (CList) (Tuple3 Nat Nat Nat)))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CList) (Tuple3 Nat Nat Nat)))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CList) (Tuple2 Nat Nat)))
  (let mainNew (?tv32) (MakeTuple2 (fst3 (reprNew ?tv32)) (snd3 (reprNew ?tv32))))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
