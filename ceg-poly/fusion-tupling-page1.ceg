(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> ((Tuple2 Tree Tree)) Tree))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Nil ?tv6)) ?tv5)
  (let tf1 (?tv5 (Cons (MakeTuple2 ?tv7 ?tv8))) (Cons (MakeTuple2 ?tv7 (tf0 ?tv8 ?tv5))))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv9 ?tv10) (ite (lq ?tv9 ?tv10) ?tv10 ?tv9))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (Tree) Nat))
  (let tf3 ((Leaf ?tv14)) Zero)
  (let tf3 ((Node (MakeTuple2 ?tv15 ?tv16))) (plus (Succ Zero) (max (tf2 ?tv15) (tf2 ?tv16))))
  (:: tf2 (-> (Tree) Nat))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: depth (-> (Tree) Nat))
  (let depth (?tv11) (tf2 ?tv11))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf5 (-> (Tree Tree) (Tuple2 List Tree)))
  (let tf5 (?tv20 (Leaf ?tv21)) (MakeTuple2 (Cons (MakeTuple2 ?tv21 (Nil Null))) ?tv20))
  (let tf5 (?tv20 (Node (MakeTuple2 ?tv22 ?tv23))) (ite (gq (depth (snd2 (tf4 ?tv22))) (depth (snd2 (tf4 ?tv23)))) (MakeTuple2 (fst2 (tf4 ?tv22)) ?tv20) (ite (nateq (depth (snd2 (tf4 ?tv22))) (depth (snd2 (tf4 ?tv23)))) (MakeTuple2 (cat (fst2 (tf4 ?tv22)) (fst2 (tf4 ?tv23))) ?tv20) (MakeTuple2 (fst2 (tf4 ?tv23)) ?tv20))))
  (:: tf4 (-> (Tree) (Tuple2 List Tree)))
  (let tf4 (?tv18) (tf5 ?tv18 ?tv18))
  (:: deepest (-> (Tree) (Tuple2 List Tree)))
  (let deepest (?tv17) (tf4 ?tv17))
  (:: main (-> (Tree) List))
  (let main (?tv24) (fst2 (deepest ?tv24)))
  (:: tf7 (-> (Tree) (Tuple2 List Nat)))
  (let tf7 ((Leaf ?tv28)) (MakeTuple2 (Cons (MakeTuple2 ?tv28 (Nil Null))) Zero))
  (let tf7 ((Node (MakeTuple2 ?tv29 ?tv30))) (ite (gq (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv30))) (MakeTuple2 (fst2 (tf6 ?tv29)) (plus (Succ Zero) (snd2 (tf6 ?tv29)))) (ite (nateq (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv30))) (MakeTuple2 (cat (fst2 (tf6 ?tv29)) (fst2 (tf6 ?tv30))) (plus (snd2 (tf6 ?tv29)) (Succ Zero))) (MakeTuple2 (fst2 (tf6 ?tv30)) (plus (snd2 (tf6 ?tv30)) (Succ Zero))))))
  (:: tf6 (-> (Tree) (Tuple2 List Nat)))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: deepestNew (-> (Tree) (Tuple2 List Nat)))
  (let deepestNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (Tree) List))
  (let mainNew (?tv31) (fst2 (deepestNew ?tv31)))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
