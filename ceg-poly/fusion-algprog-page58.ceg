(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (:: tf3 (-> ((-> (List) List) (-> (Nat) Nat) List) List))
  (let tf3 (?tv11 ?tv12 (Nil ?tv13)) (Nil Null))
  (let tf3 (?tv11 ?tv12 (Cons (MakeTuple2 ?tv14 ?tv15))) (Cons (MakeTuple2 ($ ?tv12 ?tv14) ($ ?tv11 ?tv15))))
  (:: tf2 (-> ((-> (Nat) Nat) List) List))
  (let tf2 (?tv9 ?tv10) (tf3 (tf2 ?tv9) ?tv9 ?tv10))
  (:: tf1 (-> ((-> (List) List) (-> (Nat) Nat) List) List))
  (let tf1 (?tv4 ?tv5 (Nil ?tv6)) (Nil Null))
  (let tf1 (?tv4 ?tv5 (Cons (MakeTuple2 ?tv7 ?tv8))) (Cons (MakeTuple2 ?tv7 (tf2 ?tv5 ($ ?tv4 ?tv8)))))
  (:: tf0 (-> ((-> (Nat) Nat) List) List))
  (let tf0 (?tv2 ?tv3) (tf1 (tf0 ?tv2) ?tv2 ?tv3))
  (:: tri (-> ((-> (Nat) Nat) List) List))
  (let tri (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: op (-> (Nat Nat) Nat))
  (let op (?tv16 ?tv17) (times ?tv17 ?tv16))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Nil ?tv21)) Zero)
  (let tf5 ((Cons (MakeTuple2 ?tv22 ?tv23))) (plus ?tv22 (tf4 ?tv23)))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: sum (-> (List) Nat))
  (let sum (?tv18) (tf4 ?tv18))
  (:: main (-> (Nat List) Nat))
  (let main (?tv24 ?tv25) (sum (tri (op ?tv24) ?tv25)))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (Nat (-> (List) (Tuple2 Nat Nat)) List) (Tuple2 Nat Nat)))
  (let tf7 (?tv31 ?tv32 (Nil ?tv33)) (MakeTuple2 Zero Zero))
  (let tf7 (?tv31 ?tv32 (Cons (MakeTuple2 ?tv34 ?tv35))) (MakeTuple2 (plus ?tv34 (snd2 ($ ?tv32 ?tv35))) (times ?tv31 (plus ?tv34 (snd2 ($ ?tv32 ?tv35))))))
  (:: tf6 (-> (Nat List) (Tuple2 Nat Nat)))
  (let tf6 (?tv29 ?tv30) (tf7 ?tv29 (tf6 ?tv29) ?tv30))
  (:: triNew (-> (Nat (-> (Nat) Nat) List) (Tuple2 Nat Nat)))
  (let triNew (?tv26 ?tv27 ?tv28) (tf6 ?tv26 ?tv28))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: mainNew (-> (Nat List) Nat))
  (let mainNew (?tv36 ?tv37) (fst2 (triNew ?tv36 (op ?tv36) ?tv37)))
  (=== optimize (inp0 inp1) (Nat List) (main inp0 inp1) (mainNew inp0 inp1))
)
