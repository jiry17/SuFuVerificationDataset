(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> ((Tuple2 CList CList)) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf1 (-> (List) (Tuple2 Nat Nat)))
  (let tf1 ((Elt ?tv5)) (MakeTuple2 ?tv5 (Succ Zero)))
  (let tf1 ((Cons (MakeTuple2 ?tv6 ?tv7))) (MakeTuple2 (min (fst2 (tf0 ?tv7)) ?tv6) (ite (lq ?tv6 (fst2 (tf0 ?tv7))) (Succ Zero) (plus (snd2 (tf0 ?tv7)) (ite (nateq ?tv6 (fst2 (tf0 ?tv7))) (Succ Zero) Zero)))))
  (:: tf0 (-> (List) (Tuple2 Nat Nat)))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: spec (-> (List) Nat))
  (let spec (?tv2) (snd2 (tf0 ?tv2)))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Elt ?tv14)) (Cons (MakeTuple2 ?tv14 ?tv13)))
  (let tf3 (?tv13 (Cons (MakeTuple2 ?tv15 ?tv16))) (Cons (MakeTuple2 ?tv15 (tf2 ?tv16 ?tv13))))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: cat (-> (List List) List))
  (let cat (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Single ?tv20)) (Elt ?tv20))
  (let tf5 ((Concat (MakeTuple2 ?tv21 ?tv22))) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Nat))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: tf7 (-> (CList) (Tuple2 Nat Nat)))
  (let tf7 ((Single ?tv27)) (MakeTuple2 (Succ Zero) ?tv27))
  (let tf7 ((Concat (MakeTuple2 ?tv28 ?tv29))) (MakeTuple2 (ite (lq (snd2 (tf6 ?tv28)) (snd2 (tf6 ?tv29))) (fst2 (tf6 ?tv28)) (ite (nateq (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv28))) (plus (fst2 (tf6 ?tv29)) (fst2 (tf6 ?tv28))) (fst2 (tf6 ?tv29)))) (min (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv28)))))
  (:: tf6 (-> (CList) (Tuple2 Nat Nat)))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: reprNew (-> (CList) (Tuple2 Nat Nat)))
  (let reprNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv30) (fst2 (reprNew ?tv30)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
