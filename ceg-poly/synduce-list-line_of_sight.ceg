(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Single Cons))
  (:: Single (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data CList (Elt Cat))
  (:: Elt (-> (Nat) CList))
  (:: Cat (-> ((Tuple2 CList CList)) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (:: snd3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar2))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: tf1 (-> (List) (Tuple3 Nat Nat Bool)))
  (let tf1 ((Single ?tv5)) (MakeTuple3 ?tv5 ?tv5 True))
  (let tf1 ((Cons (MakeTuple2 ?tv6 ?tv7))) (MakeTuple3 ?tv6 (max (snd3 (tf0 ?tv7)) ?tv6) (gq ?tv6 (snd3 (tf0 ?tv7)))))
  (:: tf0 (-> (List) (Tuple3 Nat Nat Bool)))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: third3 (-> ((Tuple3 pvar0 pvar1 pvar2)) pvar3))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: spec (-> (List) Bool))
  (let spec (?tv2) (third3 (tf0 ?tv2)))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Single ?tv14)) (Cons (MakeTuple2 ?tv14 ?tv13)))
  (let tf3 (?tv13 (Cons (MakeTuple2 ?tv15 ?tv16))) (Cons (MakeTuple2 ?tv15 (tf2 ?tv16 ?tv13))))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: catlist (-> (List List) List))
  (let catlist (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Elt ?tv20)) (Single ?tv20))
  (let tf5 ((Cat (MakeTuple2 ?tv21 ?tv22))) (catlist (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Bool))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (CList) (Tuple2 Bool Nat)))
  (let tf7 ((Elt ?tv27)) (MakeTuple2 True ?tv27))
  (let tf7 ((Cat (MakeTuple2 ?tv28 ?tv29))) (MakeTuple2 (and (fst2 (tf6 ?tv28)) (lq (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv28)))) (max (snd2 (tf6 ?tv29)) (snd2 (tf6 ?tv28)))))
  (:: tf6 (-> (CList) (Tuple2 Bool Nat)))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: reprNew (-> (CList) (Tuple2 Bool Nat)))
  (let reprNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv30) (fst2 (reprNew ?tv30)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
