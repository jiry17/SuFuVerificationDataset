(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> ((Tuple2 Nat List)) List))
  (data Tuple3 (pvar0 pvar1 pvar2) (MakeTuple3))
  (:: MakeTuple3 (-> (pvar0 pvar1 pvar2) (Tuple3 pvar0 pvar1 pvar2)))
  (data CnList (Sglt Cat))
  (:: Sglt (-> (Nat) CnList))
  (:: Cat (-> ((Tuple3 CnList Nat CnList)) CnList))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv7 (Elt ?tv8)) (Cons (MakeTuple2 ?tv8 ?tv7)))
  (let tf1 (?tv7 (Cons (MakeTuple2 ?tv9 ?tv10))) (Cons (MakeTuple2 ?tv9 (tf0 ?tv10 ?tv7))))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv4 ?tv5) (tf1 ?tv5 ?tv4))
  (:: catlist (-> (List List) List))
  (let catlist (?tv2 ?tv3) (tf0 ?tv2 ?tv3))
  (:: tf3 (-> (CnList) List))
  (let tf3 ((Sglt ?tv14)) (Elt ?tv14))
  (let tf3 ((Cat (MakeTuple3 ?tv15 ?tv16 ?tv17))) (catlist (tf2 ?tv15) (tf2 ?tv17)))
  (:: tf2 (-> (CnList) List))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (CnList) List))
  (let repr (?tv11) (tf2 ?tv11))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf5 (-> (List) (Tuple2 Nat Bool)))
  (let tf5 ((Elt ?tv21)) (MakeTuple2 (max Zero ?tv21) (geq ?tv21 Zero)))
  (let tf5 ((Cons (MakeTuple2 ?tv22 ?tv23))) (MakeTuple2 (ite (and (snd2 (tf4 ?tv23)) (geq ?tv22 Zero)) (plus ?tv22 (fst2 (tf4 ?tv23))) (fst2 (tf4 ?tv23))) (and (snd2 (tf4 ?tv23)) (geq ?tv22 Zero))))
  (:: tf4 (-> (List) (Tuple2 Nat Bool)))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: spec (-> (List) Nat))
  (let spec (?tv18) (fst2 (tf4 ?tv18)))
  (:: main (-> (CnList) Nat))
  (let main (?tv24) (spec (repr ?tv24)))
  (data Tuple4 (pvar0 pvar1 pvar2 pvar3) (MakeTuple4))
  (:: MakeTuple4 (-> (pvar0 pvar1 pvar2 pvar3) (Tuple4 pvar0 pvar1 pvar2 pvar3)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fourth4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar4))
  (let fourth4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: fst4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar1))
  (let fst4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: third4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar3))
  (let third4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: snd4 (-> ((Tuple4 pvar0 pvar1 pvar2 pvar3)) pvar2))
  (let snd4 ((MakeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: tf7 (-> (CnList) (Tuple4 Nat Nat Nat Nat)))
  (let tf7 ((Sglt ?tv28)) (MakeTuple4 (max ?tv28 Zero) (times (Succ (Succ Zero)) (max ?tv28 Zero)) ?tv28 ?tv28))
  (let tf7 ((Cat (MakeTuple3 ?tv29 ?tv30 ?tv31))) (MakeTuple4 (ite (or (and (nateq (fourth4 (tf6 ?tv31)) Zero) (nateq (fst4 (tf6 ?tv31)) (third4 (tf6 ?tv31)))) (lq (fst4 (tf6 ?tv31)) (snd4 (tf6 ?tv31)))) (plus (fst4 (tf6 ?tv31)) (fst4 (tf6 ?tv29))) (fst4 (tf6 ?tv31))) (ite (or (or (and (lq (fst4 (tf6 ?tv31)) (snd4 (tf6 ?tv31))) (lq (fst4 (tf6 ?tv29)) (snd4 (tf6 ?tv29)))) (and (nateq (fourth4 (tf6 ?tv31)) Zero) (nateq (fst4 (tf6 ?tv31)) (third4 (tf6 ?tv31))))) (and (nateq (fourth4 (tf6 ?tv29)) Zero) (nateq (fst4 (tf6 ?tv29)) (third4 (tf6 ?tv29))))) (plus (snd4 (tf6 ?tv31)) (snd4 (tf6 ?tv29))) (ite (or (and (lq Zero (fourth4 (tf6 ?tv31))) (nateq (fst4 (tf6 ?tv31)) (snd4 (tf6 ?tv31)))) (lq (third4 (tf6 ?tv31)) (fst4 (tf6 ?tv31)))) (fst4 (tf6 ?tv31)) (plus (fst4 (tf6 ?tv31)) (fst4 (tf6 ?tv29))))) (plus (third4 (tf6 ?tv31)) (third4 (tf6 ?tv29))) (max (fourth4 (tf6 ?tv31)) (fourth4 (tf6 ?tv29)))))
  (:: tf6 (-> (CnList) (Tuple4 Nat Nat Nat Nat)))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CnList) (Tuple4 Nat Nat Nat Nat)))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CnList) Nat))
  (let mainNew (?tv32) (fst4 (reprNew ?tv32)))
  (=== optimize (inp0) (CnList) (main inp0) (mainNew inp0))
)
