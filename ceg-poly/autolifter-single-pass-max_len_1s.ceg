(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Tuple2 (pvar0 pvar1) (MakeTuple2))
  (:: MakeTuple2 (-> (pvar0 pvar1) (Tuple2 pvar0 pvar1)))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> ((Tuple2 Bool List)) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons (MakeTuple2 ?tv6 ?tv7))) (Cons (MakeTuple2 ?tv6 (tf0 ?tv7))))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (max1s (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv10 ?tv11) (ite (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf4 (-> (Nat Nat List) Nat))
  (let tf4 (?tv17 ?tv18 (Nil ?tv19)) (max ?tv18 ?tv17))
  (let tf4 (?tv17 ?tv18 (Cons (MakeTuple2 ?tv20 ?tv21))) (ite (not ?tv20) (tf3 (max ?tv18 ?tv17) Zero ?tv21) (tf3 ?tv18 (plus ?tv17 (Succ Zero)) ?tv21)))
  (:: tf3 (-> (Nat Nat List) Nat))
  (let tf3 (?tv13 ?tv14 ?tv15) (tf4 ?tv14 ?tv13 ?tv15))
  (:: max1s (-> (List) Nat))
  (let max1s (?tv12) (tf3 Zero Zero ?tv12))
  (:: main (-> (List) Nat))
  (let main (?tv22) (singlepass ?tv22))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: snd2 (-> ((Tuple2 pvar0 pvar1)) pvar2))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> ((Tuple2 pvar0 pvar1)) pvar1))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf6 (-> (List) (Tuple2 Nat Nat)))
  (let tf6 ((Nil ?tv27)) (MakeTuple2 Zero Zero))
  (let tf6 ((Cons (MakeTuple2 ?tv28 ?tv29))) (MakeTuple2 (ite (or (not ?tv28) (lq (snd2 (tf5 ?tv29)) (fst2 (tf5 ?tv29)))) (fst2 (tf5 ?tv29)) (plus (Succ Zero) (fst2 (tf5 ?tv29)))) (ite (not ?tv28) Zero (plus (Succ Zero) (snd2 (tf5 ?tv29))))))
  (:: tf5 (-> (List) (Tuple2 Nat Nat)))
  (let tf5 (?tv25) (tf6 ?tv25))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv30) (fst2 (tf5 ?tv30)))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv24) (tf7 ?tv24))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv31) (singlepassNew ?tv31))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
