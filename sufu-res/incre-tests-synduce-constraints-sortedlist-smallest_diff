
Inductive List = elt Int | cons {Int, List};

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> >= pre x
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

abs = \x: Int. 
    if (< x 0) then - 0 x
    else x;

min = \x: Int. \y: Int. 
    if (< x y) then x
    else y;

min_diff = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> - 0 (abs (- x w))
    | cons {h, t} -> min (- 0 (abs (- h w))) (f t)
    end
);

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt x -> {0, x}
    | cons {h, t} -> {min (min_diff h t) (f t).1, h}
    end
);

target = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt w -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        spec tmp2
    else {0, 0};

target_ = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt w -> {0, w}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {+ (+ (* -1 h) tmp1.1) tmp1.2, h}
    end
);

main_ = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target_ xs) in 
        {tmp2.1, tmp2.2}
    else {0, 0};
