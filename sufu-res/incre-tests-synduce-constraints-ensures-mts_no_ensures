
Inductive List = nil Unit | cons {Int, List};

Inductive CList = cnil Unit | single Int | concat {CList, CList};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_mts = (max result.1 (+ hd result.2)) in 
                let new_sum = (+ hd result.2) in 
                    {new_mts, new_sum}
    end
) xs).1;

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single a -> 
        let tmp2 = (cons {a, nil unit}) in 
            tmp2
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                cat tmp3 tmp4
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        spec tmp5;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

repr_ = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      cnil _ -> {0, 0}
    | single a -> {max a 0, a}
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                {if (< (+ tmp4.2 tmp3.1) tmp4.1) then tmp4.1
                else + tmp4.2 tmp3.1, + tmp4.2 tmp3.2}
    end
);

main_ = \x: CList. 
    let tmp5 = (repr_ x) in 
        tmp5.1;
