
Inductive Tree = tip Int | bin {Tree, Tree};

tri = \op: Int -> Int. 
    fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      tip _ -> 
        let tmp1 = (tip 0) in 
            tmp1
    | bin {l, r} -> 
        let step = (fix (
        \g: Tree -> Tree. \ys: Tree. 
        match ys with
          tip w -> tip (op w)
        | bin {l, r} -> bin {g l, g r}
        end
    )) in 
            let tmp2 = (f l) in 
                let tmp3 = (f r) in 
                    bin {step tmp2, step tmp3}
    end
);

op = \x: Int. 
    + 1 x;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

maximum = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      tip w -> w
    | bin {l, r} -> max (f l) (f r)
    end
);

main = \t: Tree. 
    let tmp4 = (tri op t) in 
        maximum tmp4;

tri_ = \op: Int -> Int. 
    fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      tip _ -> 0
    | bin {l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                if (< tmp2 tmp3) then + 1 tmp3
                else + 1 tmp2
    end
);

main_ = \t: Tree. 
    let tmp4 = (tri_ op t) in 
        tmp4;
