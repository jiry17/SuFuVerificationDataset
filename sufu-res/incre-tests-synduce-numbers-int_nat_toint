
Inductive Nat = z Unit | s Nat;

Inductive INat = positive Nat | negative Nat;

nsum = fix (
    \f: Nat -> Int. \n: Nat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

itoint = \n: INat. 
    match n with
      negative m -> - 0 (+ 1 (nsum m))
    | positive m -> nsum m
    end
;

Inductive EInt = zero Unit | sub1 EInt | add1 EInt;

repr = fix (
    \f: EInt -> INat. \e: EInt. 
    match e with
      zero _ -> positive (z unit)
    | sub1 e' -> 
        let res = (f e') in 
            match res with
              positive z _ -> negative (z unit)
            | positive s n -> positive n
            | negative n -> negative (s n)
            end

    | add1 e' -> 
        let res = (f e') in 
            match res with
              positive n -> positive (s n)
            | negative z _ -> positive (z unit)
            | negative s n -> negative n
            end

    end
);

target = fix (
    \f: EInt -> EInt. \e: EInt. 
    match e with
      zero _ -> 
        let tmp1 = (zero unit) in 
            tmp1
    | add1 e' -> 
        let tmp2 = (f e') in 
            add1 tmp2
    | sub1 e' -> 
        let tmp3 = (f e') in 
            sub1 tmp3
    end
);

main = \x: EInt. 
    let tmp4 = (target x) in 
        itoint (repr tmp4);

target_ = fix (
    \f: EInt -> Int. \e: EInt. 
    match e with
      zero _ -> 0
    | add1 e' -> 
        let tmp2 = (f e') in 
            + tmp2 1
    | sub1 e' -> 
        let tmp3 = (f e') in 
            - tmp3 1
    end
);

main_ = \x: EInt. 
    let tmp4 = (target_ x) in 
        tmp4;
