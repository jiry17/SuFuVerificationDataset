
Inductive Tree = leaf Unit | node {Int, Tree, Tree};

Inductive PTree = pleaf Unit | pnode {Int, PList};

Inductive PList = pnil Unit | pcons {PTree, PList};

repr = fix (
    \f: PTree -> Tree. \pt: PTree. 
    match pt with
      pleaf _ -> 
        let tmp1 = (leaf unit) in 
            tmp1
    | pnode {a, xs} -> 
        let l2t = (fix (
        \g: PList -> Tree. \xs: PList. 
        match xs with
          pnil _ -> 
            let tmp2 = (leaf unit) in 
                tmp2
        | pcons {h, t} -> 
            let tmp3 = 0 in 
                let tmp4 = (f h) in 
                    let tmp5 = (g t) in 
                        node {tmp3, tmp4, tmp5}
        end
    )) in 
            let tmp6 = (leaf unit) in 
                let tmp7 = (l2t xs) in 
                    node {a, tmp6, tmp7}
    end
);

spec = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf _ -> 1
    | node {a, l, r} -> * a (* (f l) (f r))
    end
);

main = \x: PTree. 
    let tmp8 = (repr x) in 
        spec tmp8;

repr_ = fix (
    \f: PTree -> Int. \pt: PTree. 
    match pt with
      pleaf _ -> 1
    | pnode {a, xs} -> 
        let l2t = (fix (
        \g: PList -> Int. \xs: PList. 
        match xs with
          pnil _ -> 1
        | pcons {h, t} -> 0
        end
    )) in 
            let tmp7 = (l2t xs) in 
                if (== tmp7 0) then tmp7
                else a
    end
);

main_ = \x: PTree. 
    let tmp8 = (repr_ x) in 
        tmp8;
