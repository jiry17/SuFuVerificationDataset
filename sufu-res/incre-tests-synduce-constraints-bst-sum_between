
Inductive Tree = leaf Int | node {Int, Tree, Tree};

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

spec = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf a -> if (and (> global1 a) (> a global0)) then a
        else 0
    | node {a, l, r} -> + (if (and (> global1 a) (> a global0)) then a
        else 0) (+ (f l) (f r))
    end
);

target = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            tmp1
    | node {a, l, r} -> if (< a global0) then let tmp2 = (f r) in 
            node {a, l, tmp2}
        else if (> a global1) then let tmp3 = (f l) in 
            node {a, tmp3, r}
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                node {a, tmp4, tmp5}
    end
);

main = \global0: Int. \global1: Int. \t: Tree. 
    if (is_bst t) then let tmp6 = (target global0 global1 t) in 
        spec global0 global1 tmp6
    else 0;

target_ = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {if (or (<= global1 x) (<= x global0)) then 0
        else x, global1}
    | node {a, l, r} -> if (< a global0) then let tmp2 = (f r) in 
            {tmp2.1, tmp2.2}
        else if (> a global1) then let tmp3 = (f l) in 
            {tmp3.1, global1}
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                {if (and (and (< (+ tmp4.1 tmp5.1) global0) (< a tmp5.2)) (< global0 a)) then + a (min (+ tmp4.1 tmp5.1) tmp5.1)
                else if (or (== a global0) (== a tmp5.2)) then + tmp4.1 tmp5.1
                else + a (max (+ tmp4.1 tmp5.1) global0), tmp5.2}
    end
);

main_ = \global0: Int. \global1: Int. \t: Tree. 
    if (is_bst t) then let tmp6 = (target_ global0 global1 t) in 
        tmp6.1
    else 0;
