
Inductive List = elt Int | cons {Int, List};

head = \xs: List. 
    match xs with
      elt w -> w
    | cons {h, t} -> h
    end
;

is_const = fix (
    \f: List -> Bool. \xs: List. 
    match xs with
      elt x -> true
    | cons {h, t} -> and (== h (head t)) (f t)
    end
);

spec = \global0: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> if (== global0 x) then 1
        else 0
    | cons {h, t} -> if (== global0 h) then 1
        else f t
    end
);

target = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt a -> 
        let tmp1 = (elt a) in 
            tmp1
    | cons {h, t} -> 
        let tmp2 = (cons {h, t}) in 
            tmp2
    end
);

main = \global0: Int. \xs: List. 
    if (is_const xs) then let tmp3 = (target xs) in 
        spec global0 tmp3
    else 0;

target_ = \global0: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt a -> 
        let c0 = (- a global0) in 
            if (== c0 0) then 1
            else 0
    | cons {h, t} -> 
        let c0 = (- h global0) in 
            if (== c0 0) then 1
            else 0
    end
);

main_ = \global0: Int. \xs: List. 
    if (is_const xs) then let tmp3 = (target_ global0 xs) in 
        tmp3
    else 0;
