
Inductive Tree = leaf Int | node {Int, Tree, Tree};

Inductive TreeMemo = mleaf {Int, Int} | mnode {Int, Int, TreeMemo, TreeMemo};

memo = \t: TreeMemo. 
    match t with
      mleaf {x, _} -> x
    | mnode {x, _, _, _} -> x
    end
;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmax = fix (
    \f: TreeMemo -> Int. \t: TreeMemo. 
    match t with
      mleaf {_, x} -> x
    | mnode {_, x, l, r} -> max x (max (f l) (f r))
    end
);

is_memo = fix (
    \f: TreeMemo -> Bool. \t: TreeMemo. 
    match t with
      mleaf {n, x} -> true
    | mnode {n, a, l, r} -> and (and (and (>= n (tmax l)) (>= n (tmax r))) (>= n a)) (and (f l) (f r))
    end
);

repr = fix (
    \f: TreeMemo -> Tree. \t: TreeMemo. 
    match t with
      mleaf {n, a} -> leaf a
    | mnode {n, a, l, r} -> node {a, f l, f r}
    end
);

spec = \global0: Int. 
    fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf a -> == a global0
    | node {a, l, r} -> or (== a global0) (or (f l) (f r))
    end
);

target = \global0: Int. 
    fix (
    \f: TreeMemo -> TreeMemo. \t: TreeMemo. 
    match t with
      mleaf {n, a} -> t
    | mnode {n, a, l, r} -> if (> global0 n) then t
        else let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                mnode {n, a, tmp1, tmp2}
    end
);

main = \global0: Int. \mt: TreeMemo. 
    if (is_memo mt) then let tmp3 = (target global0 mt) in 
        spec global0 (repr tmp3)
    else false;

target_ = \global0: Int. 
    fix (
    \f: TreeMemo -> {Bool, Int}. \t: TreeMemo. 
    match t with
      mleaf {n, a} -> 
        let c0 = (- a global0) in 
            {== c0 0, global0}
    | mnode {n, a, l, r} -> if (> global0 n) then {false, global0}
        else let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                {or (or (== a tmp2.2) tmp1.1) tmp2.1, global0}
    end
);

main_ = \global0: Int. \mt: TreeMemo. 
    if (is_memo mt) then let tmp3 = (target_ global0 mt) in 
        tmp3.1
    else false;
