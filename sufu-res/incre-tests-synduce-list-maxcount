
Inductive List = elt Int | cons {Int, List};

Inductive CList = single Int | concat {CList, CList};

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt a -> {a, 1}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_max = (max result.1 hd) in 
                let new_cnt = (if (> hd result.1) then 1
                else + result.2 (if (== hd result.1) then 1
                else 0)) in 
                    {new_max, new_cnt}
    end
) xs).2;

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            tmp1
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                cat tmp2 tmp3
    end
);

main = \x: CList. 
    let tmp4 = (repr x) in 
        spec tmp4;

repr_ = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      single a -> {1, a}
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                {if (== tmp3.2 tmp2.2) then + tmp3.1 tmp2.1
                else if (< tmp3.2 tmp2.2) then tmp2.1
                else tmp3.1, max tmp3.2 tmp2.2}
    end
);

main_ = \x: CList. 
    let tmp4 = (repr_ x) in 
        tmp4.1;
