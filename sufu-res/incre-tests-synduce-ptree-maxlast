
Inductive Tree = telt Int | tnode {Int, Tree, Tree};

Inductive PTree = pelt Int | pnode {Int, List};

Inductive List = elt PTree | cons {PTree, List};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

last = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      telt w -> w
    | tnode {_, _, r} -> f r
    end
);

repr = fix (
    \f: Tree -> PTree. \x: Tree. 
    match x with
      telt a -> pelt a
    | tnode {a, l, r} -> 
        let repr_list = (fix (
        \g: Tree -> List. \y: Tree. 
        match y with
          telt a -> 
            let z = (pelt a) in 
                elt z
        | tnode {a, l, r} -> cons {pelt a, cons {f l, g r}}
        end
    )) in 
            pnode {a, cons {f l, repr_list r}}
    end
);

spec = fix (
    \f: PTree -> Int. \x: PTree. 
    match x with
      pelt a -> a
    | pnode {a, l} -> 
        let maxh_aux = (fix (
        \g: List -> Int. \y: List. 
        match y with
          elt a -> f a
        | cons {hd, tl} -> g tl
        end
    )) in 
            max a (maxh_aux l)
    end
);

target = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      telt w -> t
    | tnode {w, l, r} -> 
        let tmp1 = (f l) in 
            let tmp2 = (f r) in 
                tnode {w, tmp1, tmp2}
    end
);

main = \t: Tree. 
    let tmp3 = (target t) in 
        spec (repr tmp3);

target_ = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      telt w -> {w, w}
    | tnode {w, l, r} -> 
        let tmp2 = (f r) in 
            {max w tmp2.2, tmp2.2}
    end
);

main_ = \t: Tree. 
    let tmp3 = (target_ t) in 
        tmp3.1;
