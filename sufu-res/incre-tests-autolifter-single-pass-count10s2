Config SampleIntMin = 0;
Config SampleIntMax = 5;

Inductive List = cons {Int, List} | nil Unit;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            v tmp2;

inf = 100;

count10s2 = fix (
    \f: Bool -> List -> Int. \s0: Bool. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let upd = (if (and s0 (== h 2)) then 1
        else 0) in 
            let s0 = (or (== h 1) (and s0 (== h 0))) in 
                + upd (f s0 t)
    end
) false;

main = single_pass count10s2;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

single_pass_ = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, al_inf}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (or (< 1 (- tmp1.2 1)) (<= tmp1.2 h)) then tmp1.1
            else + h tmp1.1, if (== h 0) then tmp1.2
            else h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

main_ = single_pass_ count10s2;
