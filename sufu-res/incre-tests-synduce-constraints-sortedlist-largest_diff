
Inductive List = elt Int | cons {Int, List};

is_sorted = let aux = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      elt x -> <= pre x
    | cons {h, t} -> and (<= pre h) (f h t)
    end
)) in 
        \xs: List. 
        match xs with
          elt x -> true
        | cons {h, t} -> aux h t
        end
;

abs = \x: Int. 
    if (< x 0) then - 0 x
    else x;

max = \x: Int. \y: Int. 
    if (< x y) then y
    else x;

max_diff = \w: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> abs (- x w)
    | cons {h, t} -> max (abs (- h w)) (f t)
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt x -> {0, x}
    | cons {h, t} -> {max (max_diff h t) (f t).1, h}
    end
) xs).1;

target = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt w -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
);

main = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target xs) in 
        spec tmp2
    else 0;

target_ = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      elt w -> {0, w}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {+ (- tmp1.1 h) tmp1.2, h}
    end
);

main_ = \xs: List. 
    if (is_sorted xs) then let tmp2 = (target_ xs) in 
        tmp2.1
    else 0;
