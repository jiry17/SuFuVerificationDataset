
Inductive List = nil Unit | cons {Int, List};

Inductive Zipper = zip {List, List};

concat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {h, t} -> cons {h, f t ys}
    end
);

rev = fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            let tmp3 = (cons {h, nil unit}) in 
                concat tmp2 tmp3
    end
);

list_repr = fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp4 = (nil unit) in 
            tmp4
    | cons {h, t} -> 
        let tmp5 = (f t) in 
            cons {h, tmp5}
    end
);

sum = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

repr = \z: Zipper. 
    match z with
      zip {l, r} -> 
        let tmp6 = (rev l) in 
            let tmp7 = (list_repr r) in 
                concat tmp6 tmp7
    end
;

main = \z: Zipper. 
    let tmp8 = (repr z) in 
        sum tmp8;

rev_ = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            + h tmp2
    end
);

list_repr_ = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let tmp5 = (f t) in 
            + tmp5 h
    end
);

repr_ = \z: Zipper. 
    match z with
      zip {l, r} -> 
        let tmp6 = (rev_ l) in 
            let tmp7 = (list_repr_ r) in 
                + tmp6 tmp7
    end
;

main_ = \z: Zipper. 
    let tmp8 = (repr_ z) in 
        tmp8;
