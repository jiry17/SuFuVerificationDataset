
Inductive SList = elt Int | cons {Int, SList};

Inductive CList = single Int | concat {CList, CList};

cat_list = fix (
    \f: SList -> SList -> SList. \xs: SList. \ys: SList. 
    match xs with
      elt a -> cons {a, ys}
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> SList. \xs: CList. 
    match xs with
      single a -> 
        let tmp1 = (elt a) in 
            tmp1
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                cat_list tmp2 tmp3
    end
);

spec = \xs: SList. 
    (fix (
    \f: SList -> {Int, Int, Bool}. \xs: SList. 
    match xs with
      elt a -> {a, a, true}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            {hd, result.2, and result.3 (< hd result.1)}
    end
) xs).3;

main = \xs: CList. 
    let tmp4 = (repr xs) in 
        spec tmp4;

repr_ = fix (
    \f: CList -> {Bool, Int, Int}. \xs: CList. 
    match xs with
      single a -> {true, a, a}
    | concat {a, b} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f b) in 
                {and (and tmp2.1 tmp3.1) (< tmp2.3 tmp3.2), tmp2.2, tmp3.3}
    end
);

main_ = \xs: CList. 
    let tmp4 = (repr_ xs) in 
        tmp4.1;
