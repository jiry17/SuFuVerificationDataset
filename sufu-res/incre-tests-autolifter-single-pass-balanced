Config SampleIntMin = -1;
Config SampleIntMax = 1;

Inductive List = cons {Int, List} | nil Unit;

single_pass = \v: List -> Bool. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            v tmp2;

balanced = fix (
    \f: Int -> List -> Bool. \cnt: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let cnt = (+ cnt h) in 
            if (< cnt 0) then false
            else f cnt t
    end
) 0;

main = single_pass balanced;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

single_pass_ = \v: List -> Bool. 
    let run = (fix (
    \f: List -> {Bool, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {true, -100, al_inf}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            let c0 = (+ h (al_head t)) in 
                {or (and (and (<= tmp1.2 (+ c0 c0)) tmp1.1) (<= 0 (+ c0 tmp1.2))) (and (< tmp1.2 (+ c0 c0)) (not tmp1.1)), if (< (+ (- tmp1.2 tmp1.3) (- h tmp1.3)) h) then h
                else + (- tmp1.2 tmp1.3) (- h tmp1.3), h}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

main_ = single_pass_ balanced;
