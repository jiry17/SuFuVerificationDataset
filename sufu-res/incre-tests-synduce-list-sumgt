
Inductive List = nil Unit | cons {Int, List};

Inductive CList = cnil Unit | single Int | concat {CList, CList};

spec = \global0: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {hd, tl} -> + (if (> hd global0) then hd
        else 0) (f tl)
    end
);

cat = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      nil _ -> ys
    | cons {a, b} -> cons {a, f b ys}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single a -> 
        let tmp2 = (cons {a, nil unit}) in 
            tmp2
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                cat tmp3 tmp4
    end
);

main = \global0: Int. \x: CList. 
    let tmp5 = (repr x) in 
        spec global0 tmp5;

repr_ = \global0: Int. 
    fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 0
    | single a -> if (<= a global0) then 0
        else a
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                + tmp4 tmp3
    end
);

main_ = \global0: Int. \x: CList. 
    let tmp5 = (repr_ global0 x) in 
        tmp5;
