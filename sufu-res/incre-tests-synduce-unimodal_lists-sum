
Inductive UList = unil Unit | uelt Int | usplit {UList, Int, Int, UList};

Inductive List = nil Unit | cons {Int, List};

repr = fix (
    \f: List -> UList -> List. \res: List. \xs: UList. 
    match xs with
      unil _ -> res
    | uelt x -> cons {x, res}
    | usplit {x, a, b, y} -> f (cons {a, cons {b, f res y}}) x
    end
) (nil unit);

is_unimodal = let aux_down = (fix (
    \f: Int -> List -> Bool. \pre: Int. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> and (>= pre h) (f h t)
    end
)) in 
        let aux_up = (fix (
        \f: Int -> List -> Bool. \pre: Int. \xs: List. 
        match xs with
          nil _ -> true
        | cons {h, t} -> if (<= pre h) then f h t
            else aux_down h t
        end
    )) in 
            \xs: List. 
            match xs with
              nil _ -> true
            | cons {h, t} -> aux_up h t
            end
;

spec = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> + h (f t)
    end
);

target = fix (
    \f: UList -> UList. \xs: UList. 
    match xs with
      unil _ -> 
        let tmp1 = (unil unit) in 
            tmp1
    | uelt x -> 
        let tmp2 = (uelt x) in 
            tmp2
    | usplit {x, a, b, y} -> 
        let tmp3 = (f x) in 
            let tmp4 = (f y) in 
                usplit {tmp3, a, b, tmp4}
    end
);

main = \xs: UList. 
    if (is_unimodal (repr xs)) then let tmp5 = (target xs) in 
        spec (repr tmp5)
    else 0;

target_ = fix (
    \f: UList -> Int. \xs: UList. 
    match xs with
      unil _ -> 0
    | uelt x -> x
    | usplit {x, a, b, y} -> 
        let tmp3 = (f x) in 
            let tmp4 = (f y) in 
                let c0 = (+ a b) in 
                    + tmp4 (+ tmp3 c0)
    end
);

main_ = \xs: UList. 
    if (is_unimodal (repr xs)) then let tmp5 = (target_ xs) in 
        tmp5
    else 0;
