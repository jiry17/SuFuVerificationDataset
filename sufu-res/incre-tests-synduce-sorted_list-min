
Inductive List = elt Int | cons {Int, List};

insert = \y: Int. 
    fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> if (< y x) then cons {y, elt x}
        else cons {x, elt y}
    | cons {h, t} -> if (< y h) then cons {y, xs}
        else cons {h, f t}
    end
);

sort = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> elt x
    | cons {h, t} -> insert h (f t)
    end
);

spec = \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> h
    end
;

target = fix (
    \f: List -> List. \xs: List. 
    match xs with
      elt x -> 
        let tmp1 = (elt x) in 
            tmp1
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            cons {h, tmp2}
    end
);

main = \xs: List. 
    let tmp3 = (target xs) in 
        spec (sort tmp3);

target_ = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      elt x -> x
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            if (< tmp2 h) then tmp2
            else h
    end
);

main_ = \xs: List. 
    let tmp3 = (target_ xs) in 
        tmp3;
