
Inductive Tree = leaf Int | node {Int, Tree, Tree};

Inductive List = elt Int | cons {Int, List};

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | elt w -> cons {w, y}
    end
);

repr = fix (
    \f: Tree -> List. \t: Tree. 
    match t with
      leaf x -> elt x
    | node {x, l, r} -> cat (f l) (cons {x, f r})
    end
);

spec = fix (
    \f: List -> Int. \t: List. 
    match t with
      elt x -> x
    | cons {h, t} -> max h (f t)
    end
);

target = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            tmp1
    | node {a, l, r} -> 
        let tmp2 = (f r) in 
            node {a, l, tmp2}
    end
);

main = \t: Tree. 
    if (is_bst t) then let tmp3 = (target t) in 
        spec (repr tmp3)
    else 0;

target_ = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> x
    | node {a, l, r} -> 
        let tmp2 = (f r) in 
            tmp2
    end
);

main_ = \t: Tree. 
    if (is_bst t) then let tmp3 = (target_ t) in 
        tmp3
    else 0;
