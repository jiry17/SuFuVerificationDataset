
Inductive List = nil Unit | cons {Int, List};

Inductive BoolList = bnil Unit | bcons {Bool, BoolList};

map = \f: Int -> Bool. 
    fix (
    \g: List -> BoolList. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (bnil unit) in 
            tmp1
    | cons {h, t} -> 
        let tmp2 = (f h) in 
            let tmp3 = (g t) in 
                bcons {tmp2, tmp3}
    end
);

p = \x: Int. 
    >= 0 x;

all = fix (
    \f: BoolList -> Bool. \xs: BoolList. 
    match xs with
      bnil _ -> true
    | bcons {h, t} -> and h (f t)
    end
);

main = \xs: List. 
    let tmp4 = (map p xs) in 
        all tmp4;

map_ = \f: Int -> Bool. 
    fix (
    \g: List -> Bool. \xs: List. 
    match xs with
      nil _ -> true
    | cons {h, t} -> 
        let tmp3 = (g t) in 
            and tmp3 (< h 1)
    end
);

main_ = \xs: List. 
    let tmp4 = (map_ p xs) in 
        tmp4;
