  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype NList () ((line List NList) (ncons List NList NList)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (elt ?tv5)) ?tv5)
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (max ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun lmax (List) Nat)
  (=> lmaxr0 (lmax ?tv2) (tf0 ?tv2))
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv8 ?tv9) (ite (lq ?tv8 ?tv9) ?tv8 ?tv9))
  (declare-fun tf3 (List) Nat)
  (=> tf3r0 (tf3 (elt ?tv13)) ?tv13)
  (=> tf3r1 (tf3 (cons ?tv14 ?tv15)) (min ?tv14 (tf2 ?tv15)))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv11) (tf3 ?tv11))
  (declare-fun lmin (List) Nat)
  (=> lminr0 (lmin ?tv10) (tf2 ?tv10))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf5 (Nat NList) Bool)
  (=> tf5r0 (tf5 ?tv20 (line ?tv21)) (leq ?tv20 (lmax ?tv21)))
  (=> tf5r1 (tf5 ?tv20 (ncons ?tv22 ?tv23)) (and (leq ?tv20 (lmax ?tv22)) (tf4 (lmax ?tv22) ?tv23)))
  (declare-fun tf4 (Nat NList) Bool)
  (=> tf4r0 (tf4 ?tv17 ?tv18) (tf5 ?tv17 ?tv18))
  (declare-fun tf7 (NList) Bool)
  (=> tf7r0 (tf7 (line ?tv25)) true)
  (=> tf7r1 (tf7 (ncons ?tv26 ?tv27)) (tf4 (lmax ?tv26) ?tv27))
  (declare-fun tf6 (NList) Bool)
  (=> tf6r0 (tf6 ?tv24) (tf7 ?tv24))
  (declare-fun is_sorted (NList) Bool)
  (=> is_sortedr0 (is_sorted ?tv16) (tf6 ?tv16))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf9 (List) Tuple2)
  (=> tf9r0 (tf9 (elt ?tv31)) (makeTuple2 ?tv31 ?tv31))
  (=> tf9r1 (tf9 (cons ?tv32 ?tv33)) (makeTuple2 (min (fst_2 (tf8 ?tv33)) ?tv32) (max (snd_2 (tf8 ?tv33)) ?tv32)))
  (declare-fun tf8 (List) Tuple2)
  (=> tf8r0 (tf8 ?tv29) (tf9 ?tv29))
  (declare-fun interval (List) Tuple2)
  (=> intervalr0 (interval ?tv28) (tf8 ?tv28))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun third_3 (Tuple3) Bool)
  (=> third_3r0 (third_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun tf11 (NList) Tuple3)
  (=> tf11r0 (tf11 (line ?tv37)) (makeTuple3 (fst_2 (interval ?tv37)) (snd_2 (interval ?tv37)) true))
  (=> tf11r1 (tf11 (ncons ?tv38 ?tv39)) (makeTuple3 (min (fst_2 (interval ?tv38)) (fst_3 (tf10 ?tv39))) (max (snd_2 (interval ?tv38)) (snd_3 (tf10 ?tv39))) (and (third_3 (tf10 ?tv39)) (and (leq (fst_3 (tf10 ?tv39)) (fst_2 (interval ?tv38))) (geq (snd_3 (tf10 ?tv39)) (snd_2 (interval ?tv38)))))))
  (declare-fun tf10 (NList) Tuple3)
  (=> tf10r0 (tf10 ?tv35) (tf11 ?tv35))
  (declare-fun spec (NList) Bool)
  (=> specr0 (spec ?tv34) (third_3 (tf10 ?tv34)))
  (declare-fun tf13 (NList NList) NList)
  (=> tf13r0 (tf13 ?tv43 (line ?tv44)) ?tv43)
  (=> tf13r1 (tf13 ?tv43 (ncons ?tv45 ?tv46)) (ncons ?tv45 (tf12 ?tv46)))
  (declare-fun tf12 (NList) NList)
  (=> tf12r0 (tf12 ?tv41) (tf13 ?tv41 ?tv41))
  (declare-fun target (NList) NList)
  (=> targetr0 (target ?tv40) (tf12 ?tv40))
  (declare-fun main (NList) Bool)
  (=> mainr0 (main ?tv47) (ite (is_sorted ?tv47) (spec (target ?tv47)) false))
  (declare-fun fst_4 (Tuple4) Bool)
  (=> fst_4r0 (fst_4 (makeTuple4 ?x0 ?x1)) ?x0)
  (declare-fun snd_4 (Tuple4) Nat)
  (=> snd_4r0 (snd_4 (makeTuple4 ?x0 ?x1)) ?x1)
  (declare-fun tf15 (NList) Tuple4)
  (=> tf15r0 (tf15 (line ?tv51)) (makeTuple4 true (fst_2 (interval ?tv51))))
  (=> tf15r1 (tf15 (ncons ?tv52 ?tv53)) (makeTuple4 (and (fst_4 (tf14 ?tv53)) (leq (snd_4 (tf14 ?tv53)) (lmin ?tv52))) (snd_4 (tf14 ?tv53))))
  (declare-fun tf14 (NList) Tuple4)
  (=> tf14r0 (tf14 ?tv49) (tf15 ?tv49))
  (declare-fun target_ (NList) Tuple4)
  (=> target_r0 (target_ ?tv48) (tf14 ?tv48))
  (declare-fun main_ (NList) Bool)
  (=> main_r0 (main_ ?tv54) (ite (is_sorted ?tv54) (fst_4 (target_ ?tv54)) false))
  (prove (forall ((inp0 NList)) (= (main inp0) (main_ inp0))))
