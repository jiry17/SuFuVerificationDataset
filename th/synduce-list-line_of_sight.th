  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((single Nat List) (cons Nat List List)))
  (datatype CList () ((elt Nat CList) (cat CList CList CList)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun tf1 (List) Tuple2)
  (=> tf1r0 (tf1 (single ?tv5)) (makeTuple2 ?tv5 ?tv5 true))
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (makeTuple2 ?tv6 (max (snd_2 (tf0 ?tv7)) ?tv6) (gq ?tv6 (snd_2 (tf0 ?tv7)))))
  (declare-fun tf0 (List) Tuple2)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun third_2 (Tuple2) Bool)
  (=> third_2r0 (third_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun spec (List) Bool)
  (=> specr0 (spec ?tv2) (third_2 (tf0 ?tv2)))
  (declare-fun tf3 (List List) List)
  (=> tf3r0 (tf3 ?tv13 (single ?tv14)) (cons ?tv14 ?tv13))
  (=> tf3r1 (tf3 ?tv13 (cons ?tv15 ?tv16)) (cons ?tv15 (tf2 ?tv16 ?tv13)))
  (declare-fun tf2 (List List) List)
  (=> tf2r0 (tf2 ?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (declare-fun cat_list (List List) List)
  (=> cat_listr0 (cat_list ?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (declare-fun tf5 (CList) List)
  (=> tf5r0 (tf5 (elt ?tv20)) (single ?tv20))
  (=> tf5r1 (tf5 (cat ?tv21 ?tv22)) (cat_list (tf4 ?tv21) (tf4 ?tv22)))
  (declare-fun tf4 (CList) List)
  (=> tf4r0 (tf4 ?tv18) (tf5 ?tv18))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv17) (tf4 ?tv17))
  (declare-fun main (CList) Bool)
  (=> mainr0 (main ?tv23) (spec (repr ?tv23)))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun fst_3 (Tuple3) Bool)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (CList) Tuple3)
  (=> tf7r0 (tf7 (elt ?tv27)) (makeTuple3 true ?tv27))
  (=> tf7r1 (tf7 (cat ?tv28 ?tv29)) (makeTuple3 (and (fst_3 (tf6 ?tv28)) (lq (snd_3 (tf6 ?tv29)) (snd_3 (tf6 ?tv28)))) (max (snd_3 (tf6 ?tv29)) (snd_3 (tf6 ?tv28)))))
  (declare-fun tf6 (CList) Tuple3)
  (=> tf6r0 (tf6 ?tv25) (tf7 ?tv25))
  (declare-fun repr_ (CList) Tuple3)
  (=> repr_r0 (repr_ ?tv24) (tf6 ?tv24))
  (declare-fun main_ (CList) Bool)
  (=> main_r0 (main_ ?tv30) (fst_3 (repr_ ?tv30)))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
