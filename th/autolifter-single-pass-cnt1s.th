  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype List () ((cons Bool List List) (nil Unit List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv4 (nil ?tv5)) ?tv4)
  (=> tf1r1 (tf1 ?tv4 (cons ?tv6 ?tv7)) (cons ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) List)
  (=> tf0r0 (tf0 ?tv2) (tf1 ?tv2 ?tv2))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv9) (cnt1s (tf0 ?tv9)))
  (declare-fun single_pass (List) Nat)
  (=> single_passr0 (single_pass ?tv1) (tf2 ?tv1))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun not (Bool) Bool)
  (=> notr0 (not true) false)
  (=> notr1 (not false) true)
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun tf4 (Bool Nat List) Nat)
  (=> tf4r0 (tf4 ?tv15 ?tv16 (nil ?tv17)) ?tv16)
  (=> tf4r1 (tf4 ?tv15 ?tv16 (cons ?tv18 ?tv19)) (tf3 ?tv18 (ite (and (not ?tv15) ?tv18) (plus ?tv16 (succ zero)) ?tv16) ?tv19))
  (declare-fun tf3 (Bool Nat List) Nat)
  (=> tf3r0 (tf3 ?tv11 ?tv12 ?tv13) (tf4 ?tv11 ?tv12 ?tv13))
  (declare-fun cnt1s (List) Nat)
  (=> cnt1sr0 (cnt1s ?tv10) (tf3 false zero ?tv10))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv20) (single_pass ?tv20))
  (declare-fun or (Bool Bool) Bool)
  (=> orr0 (or true ?x) true)
  (=> orr1 (or ?x true) true)
  (=> orr2 (or false false) false)
  (declare-fun snd_1 (Tuple1) Bool)
  (=> snd_1r0 (snd_1 (makeTuple1 ?x0 ?x1)) ?x1)
  (declare-fun fst_1 (Tuple1) Nat)
  (=> fst_1r0 (fst_1 (makeTuple1 ?x0 ?x1)) ?x0)
  (declare-fun tf6 (List) Tuple1)
  (=> tf6r0 (tf6 (nil ?tv25)) (makeTuple1 zero false))
  (=> tf6r1 (tf6 (cons ?tv26 ?tv27)) (makeTuple1 (ite (or (not ?tv26) (snd_1 (tf5 ?tv27))) (fst_1 (tf5 ?tv27)) (plus (succ zero) (fst_1 (tf5 ?tv27)))) ?tv26))
  (declare-fun tf5 (List) Tuple1)
  (=> tf5r0 (tf5 ?tv23) (tf6 ?tv23))
  (declare-fun tf7 (List) Nat)
  (=> tf7r0 (tf7 ?tv28) (fst_1 (tf5 ?tv28)))
  (declare-fun single_pass_ (List) Nat)
  (=> single_pass_r0 (single_pass_ ?tv22) (tf7 ?tv22))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv29) (single_pass_ ?tv29))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
