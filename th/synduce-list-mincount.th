  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype CList () ((single Nat CList) (concat CList CList CList)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun tf1 (List) Tuple2)
  (=> tf1r0 (tf1 (elt ?tv5)) (makeTuple2 ?tv5 (succ zero)))
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (makeTuple2 (min (fst_2 (tf0 ?tv7)) ?tv6) (ite (lq ?tv6 (fst_2 (tf0 ?tv7))) (succ zero) (plus (snd_2 (tf0 ?tv7)) (ite (nat_eq ?tv6 (fst_2 (tf0 ?tv7))) (succ zero) zero)))))
  (declare-fun tf0 (List) Tuple2)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv2) (snd_2 (tf0 ?tv2)))
  (declare-fun tf3 (List List) List)
  (=> tf3r0 (tf3 ?tv13 (elt ?tv14)) (cons ?tv14 ?tv13))
  (=> tf3r1 (tf3 ?tv13 (cons ?tv15 ?tv16)) (cons ?tv15 (tf2 ?tv16 ?tv13)))
  (declare-fun tf2 (List List) List)
  (=> tf2r0 (tf2 ?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (declare-fun tf5 (CList) List)
  (=> tf5r0 (tf5 (single ?tv20)) (elt ?tv20))
  (=> tf5r1 (tf5 (concat ?tv21 ?tv22)) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (declare-fun tf4 (CList) List)
  (=> tf4r0 (tf4 ?tv18) (tf5 ?tv18))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv17) (tf4 ?tv17))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv23) (spec (repr ?tv23)))
  (declare-fun tf7 (CList) Tuple2)
  (=> tf7r0 (tf7 (single ?tv27)) (makeTuple2 (succ zero) ?tv27))
  (=> tf7r1 (tf7 (concat ?tv28 ?tv29)) (makeTuple2 (ite (lq (snd_2 (tf6 ?tv28)) (snd_2 (tf6 ?tv29))) (fst_2 (tf6 ?tv28)) (ite (nat_eq (snd_2 (tf6 ?tv29)) (snd_2 (tf6 ?tv28))) (plus (fst_2 (tf6 ?tv29)) (fst_2 (tf6 ?tv28))) (fst_2 (tf6 ?tv29)))) (min (snd_2 (tf6 ?tv29)) (snd_2 (tf6 ?tv28)))))
  (declare-fun tf6 (CList) Tuple2)
  (=> tf6r0 (tf6 ?tv25) (tf7 ?tv25))
  (declare-fun repr_ (CList) Tuple2)
  (=> repr_r0 (repr_ ?tv24) (tf6 ?tv24))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv30) (fst_2 (repr_ ?tv30)))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
