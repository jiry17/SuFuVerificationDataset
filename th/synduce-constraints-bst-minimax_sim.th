  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (node Nat Tree Tree Tree)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv2 ?tv3) (ite (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (declare-fun tf1 (Tree) Nat)
  (=> tf1r0 (tf1 (leaf ?tv7)) ?tv7)
  (=> tf1r1 (tf1 (node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tf0 ?tv9) (tf0 ?tv10))))
  (declare-fun tf0 (Tree) Nat)
  (=> tf0r0 (tf0 ?tv5) (tf1 ?tv5))
  (declare-fun tmin (Tree) Nat)
  (=> tminr0 (tmin ?tv4) (tf0 ?tv4))
  (declare-fun tf3 (Tree) Nat)
  (=> tf3r0 (tf3 (leaf ?tv14)) ?tv14)
  (=> tf3r1 (tf3 (node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tf2 ?tv16) (tf2 ?tv17))))
  (declare-fun tf2 (Tree) Nat)
  (=> tf2r0 (tf2 ?tv12) (tf3 ?tv12))
  (declare-fun tmax (Tree) Nat)
  (=> tmaxr0 (tmax ?tv11) (tf2 ?tv11))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun tf5 (Tree) Bool)
  (=> tf5r0 (tf5 (leaf ?tv21)) true)
  (=> tf5r1 (tf5 (node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (tf4 ?tv23) (tf4 ?tv24))))
  (declare-fun tf4 (Tree) Bool)
  (=> tf4r0 (tf4 ?tv19) (tf5 ?tv19))
  (declare-fun is_bst (Tree) Bool)
  (=> is_bstr0 (is_bst ?tv18) (tf4 ?tv18))
  (declare-fun fst_1 (Tuple1) Nat)
  (=> fst_1r0 (fst_1 (makeTuple1 ?x0 ?x1)) ?x0)
  (declare-fun snd_1 (Tuple1) Nat)
  (=> snd_1r0 (snd_1 (makeTuple1 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (Tree) Tuple1)
  (=> tf7r0 (tf7 (leaf ?tv28)) (makeTuple1 ?tv28 ?tv28))
  (=> tf7r1 (tf7 (node ?tv29 ?tv30 ?tv31)) (makeTuple1 (max ?tv29 (max (fst_1 (tf6 ?tv30)) (fst_1 (tf6 ?tv31)))) (min ?tv29 (min (snd_1 (tf6 ?tv30)) (snd_1 (tf6 ?tv31))))))
  (declare-fun tf6 (Tree) Tuple1)
  (=> tf6r0 (tf6 ?tv26) (tf7 ?tv26))
  (declare-fun spec (Tree) Tuple1)
  (=> specr0 (spec ?tv25) (tf6 ?tv25))
  (declare-fun tf9 (Tree) Tree)
  (=> tf9r0 (tf9 (leaf ?tv34)) (leaf ?tv34))
  (=> tf9r1 (tf9 (node ?tv35 ?tv36 ?tv37)) (node ?tv35 ?tv36 ?tv37))
  (declare-fun tf8 (Tree) Tree)
  (=> tf8r0 (tf8 ?tv33) (tf9 ?tv33))
  (declare-fun target (Tree) Tree)
  (=> targetr0 (target ?tv32) (tf8 ?tv32))
  (declare-fun main (Tree) Tuple1)
  (=> mainr0 (main ?tv38) (ite (is_bst ?tv38) (spec (target ?tv38)) (makeTuple1 zero zero)))
  (declare-fun tf11 (Tree) Tuple1)
  (=> tf11r0 (tf11 (leaf ?tv41)) (makeTuple1 ?tv41 ?tv41))
  (=> tf11r1 (tf11 (node ?tv42 ?tv43 ?tv44)) (makeTuple1 (tmax ?tv44) (tmin ?tv43)))
  (declare-fun tf10 (Tree) Tuple1)
  (=> tf10r0 (tf10 ?tv40) (tf11 ?tv40))
  (declare-fun target_ (Tree) Tuple1)
  (=> target_r0 (target_ ?tv39) (tf10 ?tv39))
  (declare-fun main_ (Tree) Tuple1)
  (=> main_r0 (main_ ?tv45) (ite (is_bst ?tv45) (makeTuple1 (fst_1 (target_ ?tv45)) (snd_1 (target_ ?tv45))) (makeTuple1 zero zero)))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
