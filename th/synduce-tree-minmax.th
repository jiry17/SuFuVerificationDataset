  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (node Nat Tree Tree Tree)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv2 ?tv3) (ite (gq ?tv2 ?tv3) ?tv3 ?tv2))
  (declare-fun fst_1 (Tuple1) Nat)
  (=> fst_1r0 (fst_1 (makeTuple1 ?x0 ?x1)) ?x0)
  (declare-fun snd_1 (Tuple1) Nat)
  (=> snd_1r0 (snd_1 (makeTuple1 ?x0 ?x1)) ?x1)
  (declare-fun tf1 (Tuple1 Tree) Tuple1)
  (=> tf1r0 (tf1 ?tv9 (leaf ?tv10)) (makeTuple1 (min ?tv10 (fst_1 ?tv9)) (max ?tv10 (snd_1 ?tv9))))
  (=> tf1r1 (tf1 ?tv9 (node ?tv11 ?tv12 ?tv13)) (tf0 (tf0 (makeTuple1 (min ?tv11 (fst_1 ?tv9)) (max ?tv11 (snd_1 ?tv9))) ?tv12) ?tv13))
  (declare-fun tf0 (Tuple1 Tree) Tuple1)
  (=> tf0r0 (tf0 ?tv6 ?tv7) (tf1 ?tv6 ?tv7))
  (declare-fun g (Tuple1 Tree) Tuple1)
  (=> gr0 (g ?tv4 ?tv5) (tf0 ?tv4 ?tv5))
  (declare-fun tf3 (Tree) Tuple1)
  (=> tf3r0 (tf3 (leaf ?tv16)) (makeTuple1 ?tv16 ?tv16))
  (=> tf3r1 (tf3 (node ?tv17 ?tv18 ?tv19)) (g (makeTuple1 (fst_1 (g (makeTuple1 ?tv17 ?tv17) ?tv18)) (snd_1 (g (makeTuple1 ?tv17 ?tv17) ?tv18))) ?tv19))
  (declare-fun tf2 (Tree) Tuple1)
  (=> tf2r0 (tf2 ?tv15) (tf3 ?tv15))
  (declare-fun spec (Tree) Tuple1)
  (=> specr0 (spec ?tv14) (tf2 ?tv14))
  (declare-fun tf5 (Tree) Tree)
  (=> tf5r0 (tf5 (leaf ?tv23)) (leaf ?tv23))
  (=> tf5r1 (tf5 (node ?tv24 ?tv25 ?tv26)) (node ?tv24 (tf4 ?tv25) (tf4 ?tv26)))
  (declare-fun tf4 (Tree) Tree)
  (=> tf4r0 (tf4 ?tv21) (tf5 ?tv21))
  (declare-fun repr (Tree) Tree)
  (=> reprr0 (repr ?tv20) (tf4 ?tv20))
  (declare-fun main (Tree) Tuple1)
  (=> mainr0 (main ?tv27) (spec (repr ?tv27)))
  (declare-fun tf7 (Tree) Tuple1)
  (=> tf7r0 (tf7 (leaf ?tv31)) (makeTuple1 ?tv31 ?tv31))
  (=> tf7r1 (tf7 (node ?tv32 ?tv33 ?tv34)) (makeTuple1 (min (fst_1 (tf6 ?tv33)) (min (fst_1 (tf6 ?tv34)) ?tv32)) (max (snd_1 (tf6 ?tv33)) (max (snd_1 (tf6 ?tv34)) ?tv32))))
  (declare-fun tf6 (Tree) Tuple1)
  (=> tf6r0 (tf6 ?tv29) (tf7 ?tv29))
  (declare-fun repr_ (Tree) Tuple1)
  (=> repr_r0 (repr_ ?tv28) (tf6 ?tv28))
  (declare-fun main_ (Tree) Tuple1)
  (=> main_r0 (main_ ?tv35) (makeTuple1 (fst_1 (repr_ ?tv35)) (snd_1 (repr_ ?tv35))))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
