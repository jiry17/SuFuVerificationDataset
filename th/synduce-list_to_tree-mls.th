  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((empty Unit Tree) (node Nat Tree Tree Tree)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite (Bool pvar0 pvar0) pvar0)
  (=> iter0 (ite true ?x ?y) ?x)
  (=> iter1 (ite false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun tf1 (List Tree) List)
  (=> tf1r0 (tf1 ?tv6 (empty ?tv7)) ?tv6)
  (=> tf1r1 (tf1 ?tv6 (node ?tv8 ?tv9 ?tv10)) (cons ?tv8 (tf0 (tf0 ?tv6 ?tv9) ?tv10)))
  (declare-fun tf0 (List Tree) List)
  (=> tf0r0 (tf0 ?tv3 ?tv4) (tf1 ?tv3 ?tv4))
  (declare-fun tf3 (Tree) List)
  (=> tf3r0 (tf3 (empty ?tv13)) (nil null))
  (=> tf3r1 (tf3 (node ?tv14 ?tv15 ?tv16)) (cons ?tv14 (tf0 (tf2 ?tv15) ?tv16)))
  (declare-fun tf2 (Tree) List)
  (=> tf2r0 (tf2 ?tv11) (tf3 ?tv11))
  (declare-fun repr (Tree) List)
  (=> reprr0 (repr ?tv2) (tf2 ?tv2))
  (declare-fun tf5 (Tree) Tree)
  (=> tf5r0 (tf5 (empty ?tv20)) (empty null))
  (=> tf5r1 (tf5 (node ?tv21 ?tv22 ?tv23)) (node ?tv21 (tf4 ?tv22) (tf4 ?tv23)))
  (declare-fun tf4 (Tree) Tree)
  (=> tf4r0 (tf4 ?tv18) (tf5 ?tv18))
  (declare-fun target (Tree) Tree)
  (=> targetr0 (target ?tv17) (tf4 ?tv17))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (List) Tuple2)
  (=> tf7r0 (tf7 (nil ?tv27)) (makeTuple2 zero zero))
  (=> tf7r1 (tf7 (cons ?tv28 ?tv29)) (makeTuple2 (plus ?tv28 (fst_2 (tf6 ?tv29))) (max (snd_2 (tf6 ?tv29)) (plus ?tv28 (fst_2 (tf6 ?tv29))))))
  (declare-fun tf6 (List) Tuple2)
  (=> tf6r0 (tf6 ?tv25) (tf7 ?tv25))
  (declare-fun spec (List) Tuple2)
  (=> specr0 (spec ?tv24) (tf6 ?tv24))
  (declare-fun main (Tree) Tuple2)
  (=> mainr0 (main ?tv30) (spec (repr (target ?tv30))))
  (declare-fun tf9 (Tree) Tuple2)
  (=> tf9r0 (tf9 (empty ?tv34)) (makeTuple2 zero zero))
  (=> tf9r1 (tf9 (node ?tv35 ?tv36 ?tv37)) (makeTuple2 (plus (plus (fst_2 (tf8 ?tv37)) (fst_2 (tf8 ?tv36))) ?tv35) (ite (lq (max (plus (snd_2 (tf8 ?tv37)) (fst_2 (tf8 ?tv36))) (snd_2 (tf8 ?tv36))) (plus (fst_2 (tf8 ?tv37)) (max (plus (fst_2 (tf8 ?tv36)) ?tv35) (fst_2 (tf8 ?tv36))))) (plus (fst_2 (tf8 ?tv37)) (max (plus (fst_2 (tf8 ?tv36)) ?tv35) (fst_2 (tf8 ?tv36)))) (max (plus (snd_2 (tf8 ?tv37)) (fst_2 (tf8 ?tv36))) (snd_2 (tf8 ?tv36))))))
  (declare-fun tf8 (Tree) Tuple2)
  (=> tf8r0 (tf8 ?tv32) (tf9 ?tv32))
  (declare-fun target_ (Tree) Tuple2)
  (=> target_r0 (target_ ?tv31) (tf8 ?tv31))
  (declare-fun main_ (Tree) Tuple2)
  (=> main_r0 (main_ ?tv38) (makeTuple2 (fst_2 (target_ ?tv38)) (snd_2 (target_ ?tv38))))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
