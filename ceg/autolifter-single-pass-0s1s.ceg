(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (:: tf2 (-> (List) Bool))
  (let tf2 (?tv9) (zsos (tf0 ?tv9)))
  (:: singlepass (-> (List) Bool))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf4 (-> (Bool List) Bool))
  (let tf4 (?tv14 (Nil ?tv15)) True)
  (let tf4 (?tv14 (Cons ?tv16 ?tv17)) (ite (or (not ?tv16) (and ?tv14 ?tv16)) (tf3 (and ?tv14 ?tv16) ?tv17) False))
  (:: tf3 (-> (Bool List) Bool))
  (let tf3 (?tv11 ?tv12) (tf4 ?tv11 ?tv12))
  (:: zsos (-> (List) Bool))
  (let zsos (?tv10) (tf3 True ?tv10))
  (:: main (-> (List) Bool))
  (let main (?tv18) (singlepass ?tv18))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: fst1 (-> (Tuple1) Bool))
  (let fst1 ((makeTuple1 ?x0 ?x1)) ?x0)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: snd1 (-> (Tuple1) Nat))
  (let snd1 ((makeTuple1 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf6 (-> (List) Tuple1))
  (let tf6 ((Nil ?tv23)) (makeTuple1 True Zero))
  (let tf6 ((Cons ?tv24 ?tv25)) (makeTuple1 (or (and ?tv24 (fst1 (tf5 ?tv25))) (nateq (snd1 (tf5 ?tv25)) Zero)) (ite (not ?tv24) (snd1 (tf5 ?tv25)) (plus (Succ Zero) (snd1 (tf5 ?tv25))))))
  (:: tf5 (-> (List) Tuple1))
  (let tf5 (?tv21) (tf6 ?tv21))
  (:: tf7 (-> (List) Bool))
  (let tf7 (?tv26) (fst1 (tf5 ?tv26)))
  (:: singlepassNew (-> (List) Bool))
  (let singlepassNew (?tv20) (tf7 ?tv20))
  (:: mainNew (-> (List) Bool))
  (let mainNew (?tv27) (singlepassNew ?tv27))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
