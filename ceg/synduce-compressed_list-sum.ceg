(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data MyNat (Z S))
  (:: Z (-> (Unit) MyNat))
  (:: S (-> (MyNat) MyNat))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Cnil Ccons))
  (:: Cnil (-> (Unit) CList))
  (:: Ccons (-> (MyNat Nat CList) CList))
  (:: tf1 (-> ((-> (MyNat) List) Nat List MyNat) List))
  (let tf1 (?tv6 ?tv7 ?tv8 (Z ?tv9)) ?tv8)
  (let tf1 (?tv6 ?tv7 ?tv8 (S ?tv10)) (Cons ?tv7 ($ ?tv6 ?tv10)))
  (:: tf0 (-> (Nat List MyNat) List))
  (let tf0 (?tv3 ?tv4 ?tv5) (tf1 (tf0 ?tv3 ?tv4) ?tv3 ?tv4 ?tv5))
  (:: repeat (-> (Nat List MyNat) List))
  (let repeat (?tv0 ?tv1 ?tv2) (tf0 ?tv0 ?tv1 ?tv2))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (MyNat) Nat))
  (let tf3 ((Z ?tv14)) Zero)
  (let tf3 ((S ?tv15)) (plus (Succ Zero) (tf2 ?tv15)))
  (:: tf2 (-> (MyNat) Nat))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: value (-> (MyNat) Nat))
  (let value (?tv11) (tf2 ?tv11))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Nil ?tv19)) Zero)
  (let tf5 ((Cons ?tv20 ?tv21)) (plus ?tv20 (tf4 ?tv21)))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv17) (tf5 ?tv17))
  (:: spec (-> (List) Nat))
  (let spec (?tv16) (tf4 ?tv16))
  (:: tf7 (-> (CList) List))
  (let tf7 ((Cnil ?tv25)) (Nil Null))
  (let tf7 ((Ccons ?tv26 ?tv27 ?tv28)) (repeat ?tv27 (tf6 ?tv28) ?tv26))
  (:: tf6 (-> (CList) List))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: repr (-> (CList) List))
  (let repr (?tv22) (tf6 ?tv22))
  (:: main (-> (CList) Nat))
  (let main (?tv29) (spec (repr ?tv29)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf9 (-> (CList) Nat))
  (let tf9 ((Cnil ?tv33)) Zero)
  (let tf9 ((Ccons ?tv34 ?tv35 ?tv36)) (plus (tf8 ?tv36) (times (value ?tv34) ?tv35)))
  (:: tf8 (-> (CList) Nat))
  (let tf8 (?tv31) (tf9 ?tv31))
  (:: reprNew (-> (CList) Nat))
  (let reprNew (?tv30) (tf8 ?tv30))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv37) (reprNew ?tv37))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
