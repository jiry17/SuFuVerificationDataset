(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Line Ncons))
  (:: Line (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv2 ?tv3) (ite (gq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: tf1 (-> (List) Tuple2))
  (let tf1 ((Elt ?tv7)) (makeTuple2 ?tv7 ?tv7))
  (let tf1 ((Cons ?tv8 ?tv9)) (makeTuple2 (min ?tv8 (fst2 (tf0 ?tv9))) (max ?tv8 (snd2 (tf0 ?tv9)))))
  (:: tf0 (-> (List) Tuple2))
  (let tf0 (?tv5) (tf1 ?tv5))
  (:: interval (-> (List) Tuple2))
  (let interval (?tv4) (tf0 ?tv4))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: third3 (-> (Tuple3) Bool))
  (let third3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf3 (-> (NList) Tuple3))
  (let tf3 ((Line ?tv13)) (makeTuple3 (fst2 (interval ?tv13)) (snd2 (interval ?tv13)) True))
  (let tf3 ((Ncons ?tv14 ?tv15)) (makeTuple3 (min (fst3 (tf2 ?tv15)) (fst2 (interval ?tv14))) (max (snd3 (tf2 ?tv15)) (snd2 (interval ?tv14))) (and (third3 (tf2 ?tv15)) (and (leq (fst3 (tf2 ?tv15)) (fst2 (interval ?tv14))) (leq (snd3 (tf2 ?tv15)) (snd2 (interval ?tv14)))))))
  (:: tf2 (-> (NList) Tuple3))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: spec (-> (NList) Bool))
  (let spec (?tv10) (third3 (tf2 ?tv10)))
  (:: tf5 (-> (NList NList) NList))
  (let tf5 (?tv19 (Line ?tv20)) ?tv19)
  (let tf5 (?tv19 (Ncons ?tv21 ?tv22)) (Ncons ?tv21 (tf4 ?tv22)))
  (:: tf4 (-> (NList) NList))
  (let tf4 (?tv17) (tf5 ?tv17 ?tv17))
  (:: target (-> (NList) NList))
  (let target (?tv16) (tf4 ?tv16))
  (:: main (-> (NList) Bool))
  (let main (?tv23) (spec (target ?tv23)))
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((makeTuple4 ?x0 ?x1 ?x2)) ?x1)
  (:: fst4 (-> (Tuple4) Bool))
  (let fst4 ((makeTuple4 ?x0 ?x1 ?x2)) ?x0)
  (:: third4 (-> (Tuple4) Nat))
  (let third4 ((makeTuple4 ?x0 ?x1 ?x2)) ?x2)
  (:: tf7 (-> (NList) Tuple4))
  (let tf7 ((Line ?tv27)) (makeTuple4 True (fst2 (interval ?tv27)) (snd2 (interval ?tv27))))
  (let tf7 ((Ncons ?tv28 ?tv29)) (makeTuple4 (and (and (leq (snd4 (tf6 ?tv29)) (fst2 (interval ?tv28))) (fst4 (tf6 ?tv29))) (leq (third4 (tf6 ?tv29)) (snd2 (interval ?tv28)))) (snd4 (tf6 ?tv29)) (snd2 (interval ?tv28))))
  (:: tf6 (-> (NList) Tuple4))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: targetNew (-> (NList) Tuple4))
  (let targetNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (NList) Bool))
  (let mainNew (?tv30) (fst4 (targetNew ?tv30)))
  (=== optimize (inp0) (NList) (main inp0) (mainNew inp0))
)
