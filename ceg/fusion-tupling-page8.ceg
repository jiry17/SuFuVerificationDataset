(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero (-> (Unit) Nat))
  (:: Succ (-> (Nat) Nat))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (Nat) Nat))
  (let tf1 ((Zero ?tv3)) Zero)
  (let tf1 ((Succ (Zero ?tv4))) (Succ Zero))
  (let tf1 ((Succ (Succ ?tv5))) (plus (tf0 ?tv5) (tf0 (Succ ?tv5))))
  (:: tf0 (-> (Nat) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: fib (-> (Nat) Nat))
  (let fib (?tv0) (tf0 ?tv0))
  (:: tf3 (-> (Nat Nat) Nat))
  (let tf3 (?tv9 (Zero ?tv10)) ?tv9)
  (let tf3 (?tv9 (Succ ?tv11)) (Succ (tf2 ?tv11)))
  (:: tf2 (-> (Nat) Nat))
  (let tf2 (?tv7) (tf3 ?tv7 ?tv7))
  (:: repr (-> (Nat) Nat))
  (let repr (?tv6) (tf2 ?tv6))
  (:: main (-> (Nat) Nat))
  (let main (?tv12) (fib (repr ?tv12)))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fst0 (-> (Tuple0) Nat))
  (let fst0 ((makeTuple0 ?x0 ?x1)) ?x0)
  (:: snd0 (-> (Tuple0) Nat))
  (let snd0 ((makeTuple0 ?x0 ?x1)) ?x1)
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf5 (-> (Nat) Tuple0))
  (let tf5 ((Zero ?tv16)) (makeTuple0 Zero Zero))
  (let tf5 ((Succ ?tv17)) (makeTuple0 (ite (nateq (fst0 (tf4 ?tv17)) (snd0 (tf4 ?tv17))) (plus (Succ Zero) (fst0 (tf4 ?tv17))) (plus (fst0 (tf4 ?tv17)) (snd0 (tf4 ?tv17)))) (fst0 (tf4 ?tv17))))
  (:: tf4 (-> (Nat) Tuple0))
  (let tf4 (?tv14) (tf5 ?tv14))
  (:: reprNew (-> (Nat) Tuple0))
  (let reprNew (?tv13) (tf4 ?tv13))
  (:: mainNew (-> (Nat) Nat))
  (let mainNew (?tv18) (fst0 (reprNew ?tv18)))
  (=== optimize (inp0) (Nat) (main inp0) (mainNew inp0))
)
