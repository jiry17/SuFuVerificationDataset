(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: tf1 (-> (List) Tuple2))
  (let tf1 ((Nil ?tv5)) (makeTuple2 Zero Zero))
  (let tf1 ((Cons ?tv6 ?tv7)) (makeTuple2 (max (fst2 (tf0 ?tv7)) (plus ?tv6 (snd2 (tf0 ?tv7)))) (plus ?tv6 (snd2 (tf0 ?tv7)))))
  (:: tf0 (-> (List) Tuple2))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: spec (-> (List) Nat))
  (let spec (?tv2) (fst2 (tf0 ?tv2)))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Nil ?tv14)) ?tv13)
  (let tf3 (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (tf2 ?tv16 ?tv13)))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: cat (-> (List List) List))
  (let cat (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Cnil ?tv20)) (Nil Null))
  (let tf5 ((Single ?tv21)) (Cons ?tv21 (Nil Null)))
  (let tf5 ((Concat ?tv22 ?tv23)) (cat (tf4 ?tv22) (tf4 ?tv23)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Nat))
  (let main (?tv24) (spec (repr ?tv24)))
  (:: tf7 (-> (CList) Tuple2))
  (let tf7 ((Cnil ?tv28)) (makeTuple2 Zero Zero))
  (let tf7 ((Single ?tv29)) (makeTuple2 (max ?tv29 Zero) ?tv29))
  (let tf7 ((Concat ?tv30 ?tv31)) (makeTuple2 (ite (lq (plus (snd2 (tf6 ?tv31)) (fst2 (tf6 ?tv30))) (fst2 (tf6 ?tv31))) (fst2 (tf6 ?tv31)) (plus (snd2 (tf6 ?tv31)) (fst2 (tf6 ?tv30)))) (plus (snd2 (tf6 ?tv31)) (snd2 (tf6 ?tv30)))))
  (:: tf6 (-> (CList) Tuple2))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CList) Tuple2))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv32) (fst2 (reprNew ?tv32)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
