(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Line Ncons))
  (:: Line (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Elt ?tv5)) ?tv5)
  (let tf1 ((Cons ?tv6 ?tv7)) (max ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: lmax (-> (List) Nat))
  (let lmax (?tv2) (tf0 ?tv2))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv8 ?tv9) (ite (lq ?tv8 ?tv9) ?tv8 ?tv9))
  (:: tf3 (-> (List) Nat))
  (let tf3 ((Elt ?tv13)) ?tv13)
  (let tf3 ((Cons ?tv14 ?tv15)) (min ?tv14 (tf2 ?tv15)))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: lmin (-> (List) Nat))
  (let lmin (?tv10) (tf2 ?tv10))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf5 (-> (Nat NList) Bool))
  (let tf5 (?tv20 (Line ?tv21)) (leq ?tv20 (lmax ?tv21)))
  (let tf5 (?tv20 (Ncons ?tv22 ?tv23)) (and (leq ?tv20 (lmax ?tv22)) (tf4 (lmax ?tv22) ?tv23)))
  (:: tf4 (-> (Nat NList) Bool))
  (let tf4 (?tv17 ?tv18) (tf5 ?tv17 ?tv18))
  (:: tf7 (-> (NList) Bool))
  (let tf7 ((Line ?tv25)) True)
  (let tf7 ((Ncons ?tv26 ?tv27)) (tf4 (lmax ?tv26) ?tv27))
  (:: tf6 (-> (NList) Bool))
  (let tf6 (?tv24) (tf7 ?tv24))
  (:: issorted (-> (NList) Bool))
  (let issorted (?tv16) (tf6 ?tv16))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: tf9 (-> (List) Tuple2))
  (let tf9 ((Elt ?tv31)) (makeTuple2 ?tv31 ?tv31))
  (let tf9 ((Cons ?tv32 ?tv33)) (makeTuple2 (min (fst2 (tf8 ?tv33)) ?tv32) (max (snd2 (tf8 ?tv33)) ?tv32)))
  (:: tf8 (-> (List) Tuple2))
  (let tf8 (?tv29) (tf9 ?tv29))
  (:: interval (-> (List) Tuple2))
  (let interval (?tv28) (tf8 ?tv28))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: third3 (-> (Tuple3) Bool))
  (let third3 ((makeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: tf11 (-> (NList) Tuple3))
  (let tf11 ((Line ?tv37)) (makeTuple3 (fst2 (interval ?tv37)) (snd2 (interval ?tv37)) True))
  (let tf11 ((Ncons ?tv38 ?tv39)) (makeTuple3 (min (fst2 (interval ?tv38)) (fst3 (tf10 ?tv39))) (max (snd2 (interval ?tv38)) (snd3 (tf10 ?tv39))) (and (third3 (tf10 ?tv39)) (and (leq (fst3 (tf10 ?tv39)) (fst2 (interval ?tv38))) (geq (snd3 (tf10 ?tv39)) (snd2 (interval ?tv38)))))))
  (:: tf10 (-> (NList) Tuple3))
  (let tf10 (?tv35) (tf11 ?tv35))
  (:: spec (-> (NList) Bool))
  (let spec (?tv34) (third3 (tf10 ?tv34)))
  (:: tf13 (-> (NList NList) NList))
  (let tf13 (?tv43 (Line ?tv44)) ?tv43)
  (let tf13 (?tv43 (Ncons ?tv45 ?tv46)) (Ncons ?tv45 (tf12 ?tv46)))
  (:: tf12 (-> (NList) NList))
  (let tf12 (?tv41) (tf13 ?tv41 ?tv41))
  (:: target (-> (NList) NList))
  (let target (?tv40) (tf12 ?tv40))
  (:: main (-> (NList) Bool))
  (let main (?tv47) (ite (issorted ?tv47) (spec (target ?tv47)) False))
  (:: fst4 (-> (Tuple4) Bool))
  (let fst4 ((makeTuple4 ?x0 ?x1)) ?x0)
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((makeTuple4 ?x0 ?x1)) ?x1)
  (:: tf15 (-> (NList) Tuple4))
  (let tf15 ((Line ?tv51)) (makeTuple4 True (fst2 (interval ?tv51))))
  (let tf15 ((Ncons ?tv52 ?tv53)) (makeTuple4 (and (fst4 (tf14 ?tv53)) (leq (snd4 (tf14 ?tv53)) (lmin ?tv52))) (snd4 (tf14 ?tv53))))
  (:: tf14 (-> (NList) Tuple4))
  (let tf14 (?tv49) (tf15 ?tv49))
  (:: targetNew (-> (NList) Tuple4))
  (let targetNew (?tv48) (tf14 ?tv48))
  (:: mainNew (-> (NList) Bool))
  (let mainNew (?tv54) (ite (issorted ?tv54) (fst4 (targetNew ?tv54)) False))
  (=== optimize (inp0) (NList) (main inp0) (mainNew inp0))
)
