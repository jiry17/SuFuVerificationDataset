(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv2 ?tv3) (ite (gq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: fst1 (-> (Tuple1) Nat))
  (let fst1 ((makeTuple1 ?x0 ?x1)) ?x0)
  (:: snd1 (-> (Tuple1) Nat))
  (let snd1 ((makeTuple1 ?x0 ?x1)) ?x1)
  (:: tf1 (-> (Tuple1 Tree) Tuple1))
  (let tf1 (?tv9 (Leaf ?tv10)) (makeTuple1 (min ?tv10 (fst1 ?tv9)) (max ?tv10 (snd1 ?tv9))))
  (let tf1 (?tv9 (Node ?tv11 ?tv12 ?tv13)) (tf0 (tf0 (makeTuple1 (min ?tv11 (fst1 ?tv9)) (max ?tv11 (snd1 ?tv9))) ?tv12) ?tv13))
  (:: tf0 (-> (Tuple1 Tree) Tuple1))
  (let tf0 (?tv6 ?tv7) (tf1 ?tv6 ?tv7))
  (:: g (-> (Tuple1 Tree) Tuple1))
  (let g (?tv4 ?tv5) (tf0 ?tv4 ?tv5))
  (:: tf3 (-> (Tree) Tuple1))
  (let tf3 ((Leaf ?tv16)) (makeTuple1 ?tv16 ?tv16))
  (let tf3 ((Node ?tv17 ?tv18 ?tv19)) (g (makeTuple1 (fst1 (g (makeTuple1 ?tv17 ?tv17) ?tv18)) (snd1 (g (makeTuple1 ?tv17 ?tv17) ?tv18))) ?tv19))
  (:: tf2 (-> (Tree) Tuple1))
  (let tf2 (?tv15) (tf3 ?tv15))
  (:: spec (-> (Tree) Tuple1))
  (let spec (?tv14) (tf2 ?tv14))
  (:: tf5 (-> (Tree) Tree))
  (let tf5 ((Leaf ?tv23)) (Leaf ?tv23))
  (let tf5 ((Node ?tv24 ?tv25 ?tv26)) (Node ?tv24 (tf4 ?tv25) (tf4 ?tv26)))
  (:: tf4 (-> (Tree) Tree))
  (let tf4 (?tv21) (tf5 ?tv21))
  (:: repr (-> (Tree) Tree))
  (let repr (?tv20) (tf4 ?tv20))
  (:: main (-> (Tree) Tuple1))
  (let main (?tv27) (spec (repr ?tv27)))
  (:: tf7 (-> (Tree) Tuple1))
  (let tf7 ((Leaf ?tv31)) (makeTuple1 ?tv31 ?tv31))
  (let tf7 ((Node ?tv32 ?tv33 ?tv34)) (makeTuple1 (min (fst1 (tf6 ?tv33)) (min (fst1 (tf6 ?tv34)) ?tv32)) (max (snd1 (tf6 ?tv33)) (max (snd1 (tf6 ?tv34)) ?tv32))))
  (:: tf6 (-> (Tree) Tuple1))
  (let tf6 (?tv29) (tf7 ?tv29))
  (:: reprNew (-> (Tree) Tuple1))
  (let reprNew (?tv28) (tf6 ?tv28))
  (:: mainNew (-> (Tree) Tuple1))
  (let mainNew (?tv35) (makeTuple1 (fst1 (reprNew ?tv35)) (snd1 (reprNew ?tv35))))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
