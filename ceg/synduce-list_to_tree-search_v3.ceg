(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Empty Node))
  (:: Empty (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List Tree) List))
  (let tf1 (?tv4 (Empty ?tv5)) ?tv4)
  (let tf1 (?tv4 (Node ?tv6 ?tv7 ?tv8)) (Cons ?tv6 (tf0 (tf0 ?tv4 ?tv8) ?tv7)))
  (:: tf0 (-> (List Tree) List))
  (let tf0 (?tv1 ?tv2) (tf1 ?tv1 ?tv2))
  (:: tf3 (-> (Tree) List))
  (let tf3 ((Empty ?tv11)) (Nil Null))
  (let tf3 ((Node ?tv12 ?tv13 ?tv14)) (Cons ?tv12 (tf0 (tf2 ?tv14) ?tv13)))
  (:: tf2 (-> (Tree) List))
  (let tf2 (?tv9) (tf3 ?tv9))
  (:: repr (-> (Tree) List))
  (let repr (?tv0) (tf2 ?tv0))
  (:: tf5 (-> (Tree) Tree))
  (let tf5 ((Empty ?tv18)) (Empty Null))
  (let tf5 ((Node ?tv19 ?tv20 ?tv21)) (Node ?tv19 (tf4 ?tv20) (tf4 ?tv21)))
  (:: tf4 (-> (Tree) Tree))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: target (-> (Tree) Tree))
  (let target (?tv15) (tf4 ?tv15))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: ite2 (-> (Bool Bool) Bool))
  (let ite2 (True ?y) True)
  (let ite2 (False ?y) ?y)
  (:: tf7 (-> ((-> (List) Bool) Nat List) Bool))
  (let tf7 (?tv26 ?tv27 (Nil ?tv28)) False)
  (let tf7 (?tv26 ?tv27 (Cons ?tv29 ?tv30)) (ite2 (nateq ?tv29 ?tv27) ($ ?tv26 ?tv30)))
  (:: tf6 (-> (Nat List) Bool))
  (let tf6 (?tv24 ?tv25) (tf7 (tf6 ?tv24) ?tv24 ?tv25))
  (:: spec (-> (Nat List) Bool))
  (let spec (?tv22 ?tv23) (tf6 ?tv22 ?tv23))
  (:: main (-> (Nat Tree) Bool))
  (let main (?tv31 ?tv32) (spec ?tv31 (repr (target ?tv32))))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Bool Nat) Tuple3))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: tf9 (-> ((-> (Tree) Tuple3) Nat Tree) Tuple3))
  (let tf9 (?tv37 ?tv38 (Empty ?tv39)) (MakeTuple3 False ?tv38))
  (let tf9 (?tv37 ?tv38 (Node ?tv40 ?tv41 ?tv42)) (MakeTuple3 (or (or (nateq ?tv40 (snd3 ($ ?tv37 ?tv41))) (fst3 ($ ?tv37 ?tv42))) (fst3 ($ ?tv37 ?tv41))) ?tv38))
  (:: tf8 (-> (Nat Tree) Tuple3))
  (let tf8 (?tv35 ?tv36) (tf9 (tf8 ?tv35) ?tv35 ?tv36))
  (:: targetNew (-> (Nat Tree) Tuple3))
  (let targetNew (?tv33 ?tv34) (tf8 ?tv33 ?tv34))
  (:: mainNew (-> (Nat Tree) Bool))
  (let mainNew (?tv43 ?tv44) (fst3 (targetNew ?tv43 ?tv44)))
  (=== optimize (inp0 inp1) (Nat Tree) (main inp0 inp1) (mainNew inp0 inp1))
)
