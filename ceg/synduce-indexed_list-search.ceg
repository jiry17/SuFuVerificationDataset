(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data IndexedList (Inil Icons))
  (:: Inil (-> (Unit) IndexedList))
  (:: Icons (-> (Nat Nat IndexedList) IndexedList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Nil ?tv3)) Zero)
  (let tf1 ((Cons ?tv4 ?tv5)) (plus (Succ Zero) (tf0 ?tv5)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: length (-> (List) Nat))
  (let length (?tv0) (tf0 ?tv0))
  (:: tf3 (-> (List) IndexedList))
  (let tf3 ((Nil ?tv9)) (Inil Null))
  (let tf3 ((Cons ?tv10 ?tv11)) (Icons ?tv10 (length ?tv11) (tf2 ?tv11)))
  (:: tf2 (-> (List) IndexedList))
  (let tf2 (?tv7) (tf3 ?tv7))
  (:: repr (-> (List) IndexedList))
  (let repr (?tv6) (tf2 ?tv6))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf5 (-> ((-> (IndexedList) Nat) Nat IndexedList) Nat))
  (let tf5 (?tv16 ?tv17 (Inil ?tv18)) Zero)
  (let tf5 (?tv16 ?tv17 (Icons ?tv19 ?tv20 ?tv21)) (ite (nateq ?tv19 ?tv17) ?tv20 ($ ?tv16 ?tv21)))
  (:: tf4 (-> (Nat IndexedList) Nat))
  (let tf4 (?tv14 ?tv15) (tf5 (tf4 ?tv14) ?tv14 ?tv15))
  (:: spec (-> (Nat IndexedList) Nat))
  (let spec (?tv12 ?tv13) (tf4 ?tv12 ?tv13))
  (:: main (-> (Nat List) Nat))
  (let main (?tv22 ?tv23) (spec ?tv22 (repr ?tv23)))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: tf7 (-> ((-> (List) Tuple2) Nat List) Tuple2))
  (let tf7 (?tv28 ?tv29 (Nil ?tv30)) (makeTuple2 Zero ?tv29))
  (let tf7 (?tv28 ?tv29 (Cons ?tv31 ?tv32)) (makeTuple2 (ite (or (lq ?tv31 (snd2 ($ ?tv28 ?tv32))) (lq (snd2 ($ ?tv28 ?tv32)) ?tv31)) (fst2 ($ ?tv28 ?tv32)) (length ?tv32)) ?tv29))
  (:: tf6 (-> (Nat List) Tuple2))
  (let tf6 (?tv26 ?tv27) (tf7 (tf6 ?tv26) ?tv26 ?tv27))
  (:: reprNew (-> (Nat List) Tuple2))
  (let reprNew (?tv24 ?tv25) (tf6 ?tv24 ?tv25))
  (:: mainNew (-> (Nat List) Nat))
  (let mainNew (?tv33 ?tv34) (fst2 (reprNew ?tv33 ?tv34)))
  (=== optimize (inp0 inp1) (Nat List) (main inp0 inp1) (mainNew inp0 inp1))
)
