(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: tf1 (-> ((-> (List) List) List Nat List) List))
  (let tf1 (?tv4 ?tv5 ?tv6 (Elt ?tv7)) (ite (lq ?tv6 ?tv7) (Cons ?tv6 (Elt ?tv7)) (Cons ?tv7 (Elt ?tv6))))
  (let tf1 (?tv4 ?tv5 ?tv6 (Cons ?tv8 ?tv9)) (ite (lq ?tv6 ?tv8) (Cons ?tv6 ?tv5) (Cons ?tv8 ($ ?tv4 ?tv9))))
  (:: tf0 (-> (Nat List) List))
  (let tf0 (?tv2 ?tv3) (tf1 (tf0 ?tv2) ?tv3 ?tv2 ?tv3))
  (:: insert (-> (Nat List) List))
  (let insert (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (List) List))
  (let tf3 ((Elt ?tv13)) (Elt ?tv13))
  (let tf3 ((Cons ?tv14 ?tv15)) (insert ?tv14 (tf2 ?tv15)))
  (:: tf2 (-> (List) List))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: sort (-> (List) List))
  (let sort (?tv10) (tf2 ?tv10))
  (:: tf4 (-> (List) Nat))
  (let tf4 ((Elt ?tv17)) ?tv17)
  (let tf4 ((Cons ?tv18 ?tv19)) ?tv18)
  (:: spec (-> (List) Nat))
  (let spec (?tv16) (tf4 ?tv16))
  (:: tf6 (-> (List) List))
  (let tf6 ((Elt ?tv23)) (Elt ?tv23))
  (let tf6 ((Cons ?tv24 ?tv25)) (Cons ?tv24 (tf5 ?tv25)))
  (:: tf5 (-> (List) List))
  (let tf5 (?tv21) (tf6 ?tv21))
  (:: target (-> (List) List))
  (let target (?tv20) (tf5 ?tv20))
  (:: main (-> (List) Nat))
  (let main (?tv26) (spec (sort (target ?tv26))))
  (:: tf8 (-> (List) Nat))
  (let tf8 ((Elt ?tv30)) ?tv30)
  (let tf8 ((Cons ?tv31 ?tv32)) (ite (lq (tf7 ?tv32) ?tv31) (tf7 ?tv32) ?tv31))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv28) (tf8 ?tv28))
  (:: targetNew (-> (List) Nat))
  (let targetNew (?tv27) (tf7 ?tv27))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv33) (targetNew ?tv33))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
