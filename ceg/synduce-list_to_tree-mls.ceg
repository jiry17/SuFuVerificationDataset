(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Empty Node))
  (:: Empty (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: tf1 (-> (List Tree) List))
  (let tf1 (?tv6 (Empty ?tv7)) ?tv6)
  (let tf1 (?tv6 (Node ?tv8 ?tv9 ?tv10)) (Cons ?tv8 (tf0 (tf0 ?tv6 ?tv9) ?tv10)))
  (:: tf0 (-> (List Tree) List))
  (let tf0 (?tv3 ?tv4) (tf1 ?tv3 ?tv4))
  (:: tf3 (-> (Tree) List))
  (let tf3 ((Empty ?tv13)) (Nil Null))
  (let tf3 ((Node ?tv14 ?tv15 ?tv16)) (Cons ?tv14 (tf0 (tf2 ?tv15) ?tv16)))
  (:: tf2 (-> (Tree) List))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: repr (-> (Tree) List))
  (let repr (?tv2) (tf2 ?tv2))
  (:: tf5 (-> (Tree) Tree))
  (let tf5 ((Empty ?tv20)) (Empty Null))
  (let tf5 ((Node ?tv21 ?tv22 ?tv23)) (Node ?tv21 (tf4 ?tv22) (tf4 ?tv23)))
  (:: tf4 (-> (Tree) Tree))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: target (-> (Tree) Tree))
  (let target (?tv17) (tf4 ?tv17))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (List) Tuple2))
  (let tf7 ((Nil ?tv27)) (makeTuple2 Zero Zero))
  (let tf7 ((Cons ?tv28 ?tv29)) (makeTuple2 (plus ?tv28 (fst2 (tf6 ?tv29))) (max (snd2 (tf6 ?tv29)) (plus ?tv28 (fst2 (tf6 ?tv29))))))
  (:: tf6 (-> (List) Tuple2))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: spec (-> (List) Tuple2))
  (let spec (?tv24) (tf6 ?tv24))
  (:: main (-> (Tree) Tuple2))
  (let main (?tv30) (spec (repr (target ?tv30))))
  (:: tf9 (-> (Tree) Tuple2))
  (let tf9 ((Empty ?tv34)) (makeTuple2 Zero Zero))
  (let tf9 ((Node ?tv35 ?tv36 ?tv37)) (makeTuple2 (plus (plus (fst2 (tf8 ?tv37)) (fst2 (tf8 ?tv36))) ?tv35) (ite (lq (max (plus (snd2 (tf8 ?tv37)) (fst2 (tf8 ?tv36))) (snd2 (tf8 ?tv36))) (plus (fst2 (tf8 ?tv37)) (max (plus (fst2 (tf8 ?tv36)) ?tv35) (fst2 (tf8 ?tv36))))) (plus (fst2 (tf8 ?tv37)) (max (plus (fst2 (tf8 ?tv36)) ?tv35) (fst2 (tf8 ?tv36)))) (max (plus (snd2 (tf8 ?tv37)) (fst2 (tf8 ?tv36))) (snd2 (tf8 ?tv36))))))
  (:: tf8 (-> (Tree) Tuple2))
  (let tf8 (?tv32) (tf9 ?tv32))
  (:: targetNew (-> (Tree) Tuple2))
  (let targetNew (?tv31) (tf8 ?tv31))
  (:: mainNew (-> (Tree) Tuple2))
  (let mainNew (?tv38) (makeTuple2 (fst2 (targetNew ?tv38)) (snd2 (targetNew ?tv38))))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
