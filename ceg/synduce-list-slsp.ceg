(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CnList (Sglt Cat))
  (:: Sglt (-> (Nat) CnList))
  (:: Cat (-> (CnList Nat CnList) CnList))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv7 (Elt ?tv8)) (Cons ?tv8 ?tv7))
  (let tf1 (?tv7 (Cons ?tv9 ?tv10)) (Cons ?tv9 (tf0 ?tv10 ?tv7)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv4 ?tv5) (tf1 ?tv5 ?tv4))
  (:: catlist (-> (List List) List))
  (let catlist (?tv2 ?tv3) (tf0 ?tv2 ?tv3))
  (:: tf3 (-> (CnList) List))
  (let tf3 ((Sglt ?tv14)) (Elt ?tv14))
  (let tf3 ((Cat ?tv15 ?tv16 ?tv17)) (catlist (tf2 ?tv15) (tf2 ?tv17)))
  (:: tf2 (-> (CnList) List))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (CnList) List))
  (let repr (?tv11) (tf2 ?tv11))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((makeTuple2 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1)) ?x0)
  (:: tf5 (-> (List) Tuple2))
  (let tf5 ((Elt ?tv21)) (makeTuple2 (max Zero ?tv21) (geq ?tv21 Zero)))
  (let tf5 ((Cons ?tv22 ?tv23)) (makeTuple2 (ite (and (snd2 (tf4 ?tv23)) (geq ?tv22 Zero)) (plus ?tv22 (fst2 (tf4 ?tv23))) (fst2 (tf4 ?tv23))) (and (snd2 (tf4 ?tv23)) (geq ?tv22 Zero))))
  (:: tf4 (-> (List) Tuple2))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: spec (-> (List) Nat))
  (let spec (?tv18) (fst2 (tf4 ?tv18)))
  (:: main (-> (CnList) Nat))
  (let main (?tv24) (spec (repr ?tv24)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fourth3 (-> (Tuple3) Nat))
  (let fourth3 ((makeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((makeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: third3 (-> (Tuple3) Nat))
  (let third3 ((makeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((makeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: tf7 (-> (CnList) Tuple3))
  (let tf7 ((Sglt ?tv28)) (makeTuple3 (max ?tv28 Zero) (times (Succ (Succ Zero)) (max ?tv28 Zero)) ?tv28 ?tv28))
  (let tf7 ((Cat ?tv29 ?tv30 ?tv31)) (makeTuple3 (ite (or (and (nateq (fourth3 (tf6 ?tv31)) Zero) (nateq (fst3 (tf6 ?tv31)) (third3 (tf6 ?tv31)))) (lq (fst3 (tf6 ?tv31)) (snd3 (tf6 ?tv31)))) (plus (fst3 (tf6 ?tv31)) (fst3 (tf6 ?tv29))) (fst3 (tf6 ?tv31))) (ite (or (or (and (lq (fst3 (tf6 ?tv31)) (snd3 (tf6 ?tv31))) (lq (fst3 (tf6 ?tv29)) (snd3 (tf6 ?tv29)))) (and (nateq (fourth3 (tf6 ?tv31)) Zero) (nateq (fst3 (tf6 ?tv31)) (third3 (tf6 ?tv31))))) (and (nateq (fourth3 (tf6 ?tv29)) Zero) (nateq (fst3 (tf6 ?tv29)) (third3 (tf6 ?tv29))))) (plus (snd3 (tf6 ?tv31)) (snd3 (tf6 ?tv29))) (ite (or (and (lq Zero (fourth3 (tf6 ?tv31))) (nateq (fst3 (tf6 ?tv31)) (snd3 (tf6 ?tv31)))) (lq (third3 (tf6 ?tv31)) (fst3 (tf6 ?tv31)))) (fst3 (tf6 ?tv31)) (plus (fst3 (tf6 ?tv31)) (fst3 (tf6 ?tv29))))) (plus (third3 (tf6 ?tv31)) (third3 (tf6 ?tv29))) (max (fourth3 (tf6 ?tv31)) (fourth3 (tf6 ?tv29)))))
  (:: tf6 (-> (CnList) Tuple3))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CnList) Tuple3))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CnList) Nat))
  (let mainNew (?tv32) (fst3 (reprNew ?tv32)))
  (=== optimize (inp0) (CnList) (main inp0) (mainNew inp0))
)
