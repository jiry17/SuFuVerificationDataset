(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv2 ?tv3) (ite1 (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: tf1 (-> (Tree) Nat))
  (let tf1 ((Leaf ?tv7)) ?tv7)
  (let tf1 ((Node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tf0 ?tv9) (tf0 ?tv10))))
  (:: tf0 (-> (Tree) Nat))
  (let tf0 (?tv5) (tf1 ?tv5))
  (:: tmin (-> (Tree) Nat))
  (let tmin (?tv4) (tf0 ?tv4))
  (:: tf3 (-> (Tree) Nat))
  (let tf3 ((Leaf ?tv14)) ?tv14)
  (let tf3 ((Node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tf2 ?tv16) (tf2 ?tv17))))
  (:: tf2 (-> (Tree) Nat))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: tmax (-> (Tree) Nat))
  (let tmax (?tv11) (tf2 ?tv11))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf5 (-> (Tree) Bool))
  (let tf5 ((Leaf ?tv21)) True)
  (let tf5 ((Node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (tf4 ?tv23) (tf4 ?tv24))))
  (:: tf4 (-> (Tree) Bool))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: isbst (-> (Tree) Bool))
  (let isbst (?tv18) (tf4 ?tv18))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf7 (-> (Nat (-> (Tree) Nat) Nat Tree) Nat))
  (let tf7 (?tv31 ?tv32 ?tv33 (Leaf ?tv34)) (ite1 (and (gq ?tv33 ?tv34) (gq ?tv34 ?tv31)) ?tv34 Zero))
  (let tf7 (?tv31 ?tv32 ?tv33 (Node ?tv35 ?tv36 ?tv37)) (plus (ite1 (and (gq ?tv33 ?tv35) (gq ?tv35 ?tv31)) ?tv35 Zero) (plus ($ ?tv32 ?tv36) ($ ?tv32 ?tv37))))
  (:: tf6 (-> (Nat Nat Tree) Nat))
  (let tf6 (?tv28 ?tv29 ?tv30) (tf7 ?tv28 (tf6 ?tv28 ?tv29) ?tv29 ?tv30))
  (:: spec (-> (Nat Nat Tree) Nat))
  (let spec (?tv25 ?tv26 ?tv27) (tf6 ?tv25 ?tv26 ?tv27))
  (:: ite2 (-> (Bool Tree Tree) Tree))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: tf9 (-> (Nat (-> (Tree) Tree) Nat Tree) Tree))
  (let tf9 (?tv44 ?tv45 ?tv46 (Leaf ?tv47)) (Leaf ?tv47))
  (let tf9 (?tv44 ?tv45 ?tv46 (Node ?tv48 ?tv49 ?tv50)) (ite2 (lq ?tv48 ?tv46) (Node ?tv48 ?tv49 ($ ?tv45 ?tv50)) (ite2 (gq ?tv48 ?tv44) (Node ?tv48 ($ ?tv45 ?tv49) ?tv50) (Node ?tv48 ($ ?tv45 ?tv49) ($ ?tv45 ?tv50)))))
  (:: tf8 (-> (Nat Nat Tree) Tree))
  (let tf8 (?tv41 ?tv42 ?tv43) (tf9 ?tv41 (tf8 ?tv41 ?tv42) ?tv42 ?tv43))
  (:: target (-> (Nat Nat Tree) Tree))
  (let target (?tv38 ?tv39 ?tv40) (tf8 ?tv39 ?tv38 ?tv40))
  (:: main (-> (Nat Nat Tree) Nat))
  (let main (?tv51 ?tv52 ?tv53) (ite1 (isbst ?tv53) (spec ?tv51 ?tv52 (target ?tv51 ?tv52 ?tv53)) Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: ite3 (-> (Bool Tuple3 Tuple3) Tuple3))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: tf11 (-> (Nat (-> (Tree) Tuple3) Nat Tree) Tuple3))
  (let tf11 (?tv60 ?tv61 ?tv62 (Leaf ?tv63)) (MakeTuple3 (ite1 (or (leq ?tv62 ?tv63) (leq ?tv63 ?tv60)) Zero ?tv63) ?tv62))
  (let tf11 (?tv60 ?tv61 ?tv62 (Node ?tv64 ?tv65 ?tv66)) (ite3 (lq ?tv64 ?tv60) (MakeTuple3 (fst3 ($ ?tv61 ?tv66)) (snd3 ($ ?tv61 ?tv66))) (ite3 (gq ?tv64 ?tv62) (MakeTuple3 (fst3 ($ ?tv61 ?tv65)) ?tv62) (MakeTuple3 (ite1 (and (and (lq (plus (fst3 ($ ?tv61 ?tv65)) (fst3 ($ ?tv61 ?tv66))) ?tv60) (lq ?tv64 (snd3 ($ ?tv61 ?tv66)))) (lq ?tv60 ?tv64)) (plus ?tv64 (min (plus (fst3 ($ ?tv61 ?tv65)) (fst3 ($ ?tv61 ?tv66))) (fst3 ($ ?tv61 ?tv66)))) (ite1 (or (nateq ?tv64 ?tv60) (nateq ?tv64 (snd3 ($ ?tv61 ?tv66)))) (plus (fst3 ($ ?tv61 ?tv65)) (fst3 ($ ?tv61 ?tv66))) (plus ?tv64 (max (plus (fst3 ($ ?tv61 ?tv65)) (fst3 ($ ?tv61 ?tv66))) ?tv60)))) (snd3 ($ ?tv61 ?tv66))))))
  (:: tf10 (-> (Nat Nat Tree) Tuple3))
  (let tf10 (?tv57 ?tv58 ?tv59) (tf11 ?tv57 (tf10 ?tv57 ?tv58) ?tv58 ?tv59))
  (:: targetNew (-> (Nat Nat Tree) Tuple3))
  (let targetNew (?tv54 ?tv55 ?tv56) (tf10 ?tv54 ?tv55 ?tv56))
  (:: mainNew (-> (Nat Nat Tree) Nat))
  (let mainNew (?tv67 ?tv68 ?tv69) (ite1 (isbst ?tv69) (fst3 (targetNew ?tv67 ?tv68 ?tv69)) Zero))
  (=== optimize (inp0 inp1 inp2) (Nat Nat Tree) (main inp0 inp1 inp2) (mainNew inp0 inp1 inp2))
)
