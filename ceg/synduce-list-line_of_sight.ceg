(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Single Cons))
  (:: Single (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Elt Cat))
  (:: Elt (-> (Nat) CList))
  (:: Cat (-> (CList CList) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: tf1 (-> (List) Tuple2))
  (let tf1 ((Single ?tv5)) (makeTuple2 ?tv5 ?tv5 True))
  (let tf1 ((Cons ?tv6 ?tv7)) (makeTuple2 ?tv6 (max (snd2 (tf0 ?tv7)) ?tv6) (gq ?tv6 (snd2 (tf0 ?tv7)))))
  (:: tf0 (-> (List) Tuple2))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((makeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: spec (-> (List) Bool))
  (let spec (?tv2) (third2 (tf0 ?tv2)))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Single ?tv14)) (Cons ?tv14 ?tv13))
  (let tf3 (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (tf2 ?tv16 ?tv13)))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: catlist (-> (List List) List))
  (let catlist (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Elt ?tv20)) (Single ?tv20))
  (let tf5 ((Cat ?tv21 ?tv22)) (catlist (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Bool))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((makeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((makeTuple3 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (CList) Tuple3))
  (let tf7 ((Elt ?tv27)) (makeTuple3 True ?tv27))
  (let tf7 ((Cat ?tv28 ?tv29)) (makeTuple3 (and (fst3 (tf6 ?tv28)) (lq (snd3 (tf6 ?tv29)) (snd3 (tf6 ?tv28)))) (max (snd3 (tf6 ?tv29)) (snd3 (tf6 ?tv28)))))
  (:: tf6 (-> (CList) Tuple3))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv30) (fst3 (reprNew ?tv30)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
