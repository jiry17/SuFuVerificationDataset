(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data IdxList (Ielt Icons))
  (:: Ielt (-> (Nat) IdxList))
  (:: Icons (-> (Nat Nat IdxList) IdxList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite (-> (Bool pvar0 pvar0) pvar0))
  (let ite (True ?x ?y) ?x)
  (let ite (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Elt ?tv5)) ?tv5)
  (let tf1 ((Cons ?tv6 ?tv7)) (plus ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: hsum (-> (List) Nat))
  (let hsum (?tv2) (tf0 ?tv2))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((makeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((makeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: third2 (-> (Tuple2) Nat))
  (let third2 ((makeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: tf3 (-> (List) Tuple2))
  (let tf3 ((Elt ?tv11)) (ite (gq ?tv11 Zero) (makeTuple2 ?tv11 ?tv11 ?tv11) (makeTuple2 Zero Zero Zero)))
  (let tf3 ((Cons ?tv12 ?tv13)) (makeTuple2 (max (plus ?tv12 (hsum ?tv13)) (fst2 (tf2 ?tv13))) (max (plus ?tv12 (snd2 (tf2 ?tv13))) Zero) (max (max (plus ?tv12 (snd2 (tf2 ?tv13))) Zero) (third2 (tf2 ?tv13)))))
  (:: tf2 (-> (List) Tuple2))
  (let tf2 (?tv9) (tf3 ?tv9))
  (:: mss (-> (List) Nat))
  (let mss (?tv8) (third2 (tf2 ?tv8)))
  (:: spec (-> (List) Nat))
  (let spec (?tv14) (mss ?tv14))
  (:: tf5 (-> (IdxList) List))
  (let tf5 ((Ielt ?tv18)) (Elt ?tv18))
  (let tf5 ((Icons ?tv19 ?tv20 ?tv21)) (Cons ?tv19 (tf4 ?tv21)))
  (:: tf4 (-> (IdxList) List))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: repr (-> (IdxList) List))
  (let repr (?tv15) (tf4 ?tv15))
  (:: main (-> (IdxList) Nat))
  (let main (?tv22) (spec (repr ?tv22)))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((makeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((makeTuple3 ?x0 ?x1)) ?x0)
  (:: tf7 (-> (IdxList) Tuple3))
  (let tf7 ((Ielt ?tv26)) (makeTuple3 (max ?tv26 Zero) ?tv26))
  (let tf7 ((Icons ?tv27 ?tv28 ?tv29)) (makeTuple3 (ite (and (lq (plus ?tv27 (snd3 (tf6 ?tv29))) (fst3 (tf6 ?tv29))) (lq ?tv27 (fst3 (tf6 ?tv29)))) (fst3 (tf6 ?tv29)) (ite (lq (snd3 (tf6 ?tv29)) Zero) ?tv27 (plus ?tv27 (snd3 (tf6 ?tv29))))) (plus ?tv27 (max (snd3 (tf6 ?tv29)) Zero))))
  (:: tf6 (-> (IdxList) Tuple3))
  (let tf6 (?tv24) (tf7 ?tv24))
  (:: reprNew (-> (IdxList) Tuple3))
  (let reprNew (?tv23) (tf6 ?tv23))
  (:: mainNew (-> (IdxList) Nat))
  (let mainNew (?tv30) (fst3 (reprNew ?tv30)))
  (=== optimize (inp0) (IdxList) (main inp0) (mainNew inp0))
)
