
Inductive List = nil Unit | cons {Int, List};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let r = (f t) in 
            {+ h r.1, max r.2 (+ h r.1)}
    end
) xs).2;

snoc = fix (
    \f: List -> Int -> List. \xs: List. \w: Int. 
    match xs with
      nil _ -> cons {w, nil unit}
    | cons {h, t} -> cons {h, f t w}
    end
);

repr = fix (
    \f: List -> List -> List. \pre: List. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (snoc pre h) t
    end
) (let tmp1 = (nil unit) in 
        tmp1);

main = \xs: List. 
    let tmp2 = (repr xs) in 
        spec tmp2;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

repr_ = fix (
    \f: Int -> List -> Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (+ h (max pre (- 0 h))) t
    end
) 0;

main_ = \xs: List. 
    let tmp2 = (repr_ xs) in 
        tmp2;
