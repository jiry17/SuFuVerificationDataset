
Inductive List = nil Unit | cons {Int, List};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

mts = fix (
    \f: Int -> List -> Int. \pre: Int. \xs: List. 
    match xs with
      nil _ -> pre
    | cons {h, t} -> f (max 0 (+ h pre)) t
    end
);

mps = fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> max (+ h (f t)) 0
    end
);

spec = \xs: List. 
    {mts 0 xs, mps xs};

repr = fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            cons {h, tmp2}
    end
);

main = \xs: List. 
    let tmp3 = (repr xs) in 
        spec tmp3;

repr_ = fix (
    \f: List -> {Int, Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0, 0}
    | cons {h, t} -> 
        let tmp2 = (f t) in 
            {max tmp2.1 (+ h tmp2.3), + (+ (* -1 h) (max h (+ h tmp2.2))) (max h (- 0 tmp2.2)), + h tmp2.3}
    end
);

main_ = \xs: List. 
    let tmp3 = (repr_ xs) in 
        {tmp3.1, tmp3.2};
