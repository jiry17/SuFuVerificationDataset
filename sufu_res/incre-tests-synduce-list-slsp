
Inductive List = elt Int | cons {Int, List};

Inductive CnList = sglt Int | cat {CnList, Int, CnList};

max = \x: Int. \y: Int. 
    if (> x y) then x
    else y;

cat_list = fix (
    \f: List -> List -> List. \xs: List. \ys: List. 
    match xs with
      elt a -> cons {a, ys}
    | cons {hd, tl} -> cons {hd, f tl ys}
    end
);

repr = fix (
    \f: CnList -> List. \xs: CnList. 
    match xs with
      sglt a -> 
        let tmp1 = (elt a) in 
            tmp1
    | cat {a, b, c} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f c) in 
                cat_list tmp2 tmp3
    end
);

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Bool}. \xs: List. 
    match xs with
      elt a -> {max 0 a, >= a 0}
    | cons {hd, tl} -> 
        let result = (f tl) in 
            let new_cond = (and result.2 (>= hd 0)) in 
                {if (new_cond) then + hd result.1
                else result.1, new_cond}
    end
) xs).1;

main = \x: CnList. 
    let tmp4 = (repr x) in 
        spec tmp4;

repr_ = fix (
    \f: CnList -> {Int, Int, Int, Int}. \xs: CnList. 
    match xs with
      sglt a -> {max a 0, * 2 (max a 0), a, a}
    | cat {a, b, c} -> 
        let tmp2 = (f a) in 
            let tmp3 = (f c) in 
                {if (or (and (== tmp3.4 0) (== tmp3.1 tmp3.3)) (< tmp3.1 tmp3.2)) then + tmp3.1 tmp2.1
                else tmp3.1, if (or (or (and (< tmp3.1 tmp3.2) (< tmp2.1 tmp2.2)) (and (== tmp3.4 0) (== tmp3.1 tmp3.3))) (and (== tmp2.4 0) (== tmp2.1 tmp2.3))) then + tmp3.2 tmp2.2
                else if (or (and (< 0 tmp3.4) (== tmp3.1 tmp3.2)) (< tmp3.3 tmp3.1)) then tmp3.1
                else + tmp3.1 tmp2.1, + tmp3.3 tmp2.3, max tmp3.4 tmp2.4}
    end
);

main_ = \x: CnList. 
    let tmp4 = (repr_ x) in 
        tmp4.1;
