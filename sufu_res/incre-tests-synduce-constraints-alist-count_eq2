
Inductive List = nil Unit | cons {Int, List};

Inductive MyNat = z Unit | s MyNat;

Inductive AList = anil Unit | acons {Int, MyNat, AList};

is_unique = let key_differ = (\key: Int. 
    fix (
    \f: AList -> Bool. \xs: AList. 
    match xs with
      anil _ -> true
    | acons {h, _, t} -> and (not (== h key)) (f t)
    end
)) in 
        fix (
        \f: AList -> Bool. \xs: AList. 
        match xs with
          anil _ -> true
        | acons {h, _, t} -> and (key_differ h t) (f t)
        end
    );

spec = \global0: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> if (== h global0) then + 1 (f t)
        else f t
    end
);

repr = let repeat = (\w: Int. \suf: List. 
    fix (
    \f: MyNat -> List. \n: MyNat. 
    match n with
      z _ -> suf
    | s m -> cons {w, f m}
    end
)) in 
        fix (
        \f: AList -> List. \xs: AList. 
        match xs with
          anil _ -> nil unit
        | acons {h, n, t} -> repeat h (f t) n
        end
    );

n2i = fix (
    \f: MyNat -> Int. \n: MyNat. 
    match n with
      z _ -> 0
    | s m -> + 1 (f m)
    end
);

target = \global0: Int. 
    fix (
    \f: AList -> AList. \xs: AList. 
    match xs with
      anil _ -> 
        let tmp1 = (anil unit) in 
            tmp1
    | acons {h, n, t} -> if (== h global0) then let num = (n2i n) in 
            let tmp2 = (acons {h, n, t}) in 
                tmp2
        else let tmp3 = (f t) in 
            acons {h, n, tmp3}
    end
);

main = \global0: Int. \xs: AList. 
    if (is_unique xs) then let tmp4 = (target global0 xs) in 
        spec global0 (repr tmp4)
    else 0;

target_ = \global0: Int. 
    fix (
    \f: AList -> Int. \xs: AList. 
    match xs with
      anil _ -> 0
    | acons {h, n, t} -> if (== h global0) then let num = (n2i n) in 
            num
        else let tmp3 = (f t) in 
            tmp3
    end
);

main_ = \global0: Int. \xs: AList. 
    if (is_unique xs) then let tmp4 = (target_ global0 xs) in 
        tmp4
    else 0;
