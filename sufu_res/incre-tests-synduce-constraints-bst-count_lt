
Inductive Tree = leaf Int | node {Int, Tree, Tree};

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

is_bst = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> true
    | node {w, l, r} -> and (and (>= w (tmax l)) (<= w (tmin r))) (and (f l) (f r))
    end
);

spec = \global0: Int. 
    fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> if (< x global0) then 1
        else 0
    | node {a, l, r} -> + (if (< a global0) then 1
        else 0) (+ (f l) (f r))
    end
);

target = \global0: Int. 
    fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      leaf x -> 
        let tmp1 = (leaf x) in 
            tmp1
    | node {a, l, r} -> if (< a global0) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {a, tmp2, tmp3}
        else let tmp4 = (f l) in 
            node {a, tmp4, r}
    end
);

main = \global0: Int. \t: Tree. 
    if (is_bst t) then let tmp5 = (target global0 t) in 
        spec global0 tmp5
    else 0;

target_ = \global0: Int. 
    fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf x -> 
        let c0 = (- x global0) in 
            max 0 (min 1 (- 0 c0))
    | node {a, l, r} -> if (< a global0) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                + tmp2 (+ tmp3 1)
        else let tmp4 = (f l) in 
            tmp4
    end
);

main_ = \global0: Int. \t: Tree. 
    if (is_bst t) then let tmp5 = (target_ global0 t) in 
        tmp5
    else 0;
