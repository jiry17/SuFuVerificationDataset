
Inductive Tree = nil Unit | node {Int, Tree, Tree};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \t: Tree. 
    (fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \s: {Int, Int}. \t: Tree. 
    match t with
      nil _ -> s
    | node {a, l, r} -> 
        let result = (f s l) in 
            f {+ a result.1, max 0 (+ a result.2)} r
    end
) {0, 0} t).2;

repr = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {a, tmp2, tmp3}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        spec tmp4;

repr_ = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      nil _ -> {0, 0}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {if (< (+ (- a tmp3.2) tmp2.1) tmp3.1) then tmp3.1
                else + (- a tmp3.2) tmp2.1, + (- tmp3.2 a) tmp2.2}
    end
);

main_ = \t: Tree. 
    let tmp4 = (repr_ t) in 
        tmp4.1;
