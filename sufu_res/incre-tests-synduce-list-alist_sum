
Inductive List = nil Unit | cons {{Int, Int}, List};

Inductive CList = cnil Unit | single {Int, Int} | concat {CList, CList};

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single x -> 
        let tmp2 = (cons {x, nil unit}) in 
            tmp2
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                cat tmp3 tmp4
    end
);

spec = \global0: Int. 
    fix (
    \f: List -> Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let key = h.1 in 
            let value = h.2 in 
                if (== global0 key) then + value (f t)
                else f t
    end
);

main = \global0: Int. \x: CList. 
    let tmp5 = (repr x) in 
        spec global0 tmp5;

repr_ = \global0: Int. 
    fix (
    \f: CList -> Int. \xs: CList. 
    match xs with
      cnil _ -> 0
    | single x -> 
        let c0 = x.2 in 
            let c1 = (- global0 x.1) in 
                if (or (< 0 c1) (< c1 0)) then 0
                else c0
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                + tmp3 tmp4
    end
);

main_ = \global0: Int. \x: CList. 
    let tmp5 = (repr_ global0 x) in 
        tmp5;
