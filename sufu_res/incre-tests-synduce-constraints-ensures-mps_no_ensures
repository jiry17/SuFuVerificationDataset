
Inductive CList = cnil Unit | single Int | concat {CList, CList};

Inductive List = nil Unit | cons {Int, List};

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = fix (
    \f: CList -> List. \cl: CList. 
    match cl with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single h -> 
        let tmp2 = (cons {h, nil unit}) in 
            tmp2
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                cat tmp3 tmp4
    end
);

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let res = (f t) in 
            {max 0 (+ res.1 h), + res.2 h}
    end
) xs).1;

@Start main = \cl: CList. 
    let tmp5 = (repr cl) in 
        spec tmp5;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

repr_ = fix (
    \f: CList -> {Int, Int}. \cl: CList. 
    match cl with
      cnil _ -> {0, 0}
    | single h -> {if (< h 0) then 0
        else h, h}
    | concat {l, r} -> 
        let tmp3 = (f l) in 
            let tmp4 = (f r) in 
                {if (< tmp3.1 (+ tmp3.2 tmp4.1)) then + tmp3.2 tmp4.1
                else tmp3.1, + tmp3.2 tmp4.2}
    end
);

@Start main_ = \cl: CList. 
    let tmp5 = (repr_ cl) in 
        tmp5.1;
