Config SampleIntMin = 0;
Config SampleIntMax = 1;

Inductive List = cons {Int, List} | nil Unit;

length = fix (
    \f: List -> Int. \x: List. 
    match x with
      cons {h, t} -> + (f t) 1
    | nil _ -> 0
    end
);

concat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

split = \xs: List. 
    fix (
    \f: List -> Int -> {List, List}. \x: List. \n: Int. 
    if (< n 1) then {nil unit, x}
    else match x with
      cons {h, t} -> 
        let res = (f t (- n 1)) in 
            {cons {h, res.1}, res.2}
    | _ -> {nil unit, nil unit}
    end
) xs (/ (length xs) 2);

dac = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {_, nil _} -> xs
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    concat tmp1 tmp2
    end
)) in 
        let tmp3 = (run xs) in 
            v tmp3;

inf = 100;

cnt1s = fix (
    \f: Int -> Int -> List -> Int. \pre: Int. \cnt: Int. \xs: List. 
    match xs with
      nil _ -> cnt
    | cons {h, t} -> 
        let cnt = (if (and (== pre 0) (== h 1)) then + cnt 1
        else cnt) in 
            f h pre t
    end
) 0 0;

main = dac cnt1s;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

dac_ = \v: List -> Int. \xs: List. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {_, nil _} -> {0, 1}
    | _ -> 
        let sp = (split xs) in 
            let tmp1 = (f sp.1) in 
                let tmp2 = (f sp.2) in 
                    let c0 = (al_head xs) in 
                        {if (== c0 tmp2.2) then + c0 tmp2.1
                        else tmp2.1, + tmp1.2 tmp2.2}
    end
)) in 
        let tmp3 = (run xs) in 
            tmp3.1;

main_ = dac_ cnt1s;
