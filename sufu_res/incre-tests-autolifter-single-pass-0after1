
Inductive List = nil Unit | cons {Bool, List};

single_pass = \v: List -> Bool. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            v tmp2;

inf = 100;

zafter1 = fix (
    \f: Bool -> List -> Bool. \seen1: Bool. \xs: List. 
    match xs with
      nil _ -> false
    | cons {h, t} -> if (and seen1 (not h)) then true
        else f (or seen1 h) t
    end
) false;

main = single_pass zafter1;

@Combine @Align al_true = true;

@Combine @Align al_false = false;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_false
    | cons {h, _} -> h
    end
;

single_pass_ = \v: List -> Bool. 
    let run = (fix (
    \f: List -> {Bool, Bool}. \xs: List. 
    match xs with
      nil _ -> {false, true}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {or (and h (not tmp1.2)) tmp1.1, and h tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

main_ = single_pass_ zafter1;
