
Inductive Tree = nil Unit | node {Int, Tree, Tree};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

height = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> + 1 (max (f l) (f r))
    end
);

balanced = fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      nil _ -> true
    | node {w, l, r} -> and (and (== (height l) (height r)) (f l)) (f r)
    end
);

target = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      nil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {w, tmp2, tmp3}
    end
);

main = \t: Tree. 
    if (balanced t) then let tmp4 = (target t) in 
        height tmp4
    else 0;

target_ = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      nil _ -> 0
    | node {w, l, r} -> 
        let tmp3 = (f r) in 
            + tmp3 1
    end
);

main_ = \t: Tree. 
    if (balanced t) then let tmp4 = (target_ t) in 
        tmp4
    else 0;
