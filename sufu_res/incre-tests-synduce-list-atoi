
Inductive List = nil Unit | cons {Int, List};

Inductive CList = cnil Unit | single Int | concat {CList, CList};

base = 10;

spec = \xs: List. 
    (fix (
    \f: List -> {Int, Int}. \x: List. 
    match x with
      nil _ -> {0, 1}
    | cons {h, t} -> 
        let result = (f t) in 
            {+ h (* 10 result.1), * 10 result.2}
    end
) xs).1;

cat = fix (
    \f: List -> List -> List. \a: List. \b: List. 
    match a with
      nil _ -> b
    | cons {h, t} -> cons {h, f t b}
    end
);

repr = fix (
    \f: CList -> List. \xs: CList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single x -> 
        let tmp2 = (cons {x, nil unit}) in 
            tmp2
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                cat tmp3 tmp4
    end
);

main = \x: CList. 
    let tmp5 = (repr x) in 
        spec tmp5;

@Combine al_inf = 100;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_inf
    | cons {h, _} -> h
    end
;

repr_ = fix (
    \f: CList -> {Int, Int}. \xs: CList. 
    match xs with
      cnil _ -> {0, 0}
    | single x -> {x, 1}
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                {if (== tmp3.2 1) then + (* tmp4.1 base) tmp3.1
                else if (< 0 tmp3.2) then + (* tmp4.1 al_inf) tmp3.1
                else tmp4.1, + tmp4.2 tmp3.2}
    end
);

main_ = \x: CList. 
    let tmp5 = (repr_ x) in 
        tmp5.1;
