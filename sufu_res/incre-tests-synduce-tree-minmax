
Inductive Tree = leaf Int | node {Int, Tree, Tree};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (> a b) then b
    else a;

g = fix (
    \f: ({Int, Int}) -> Tree -> {Int, Int}. \x: {Int, Int}. \t: Tree. 
    match t with
      leaf a -> {min a x.1, max a x.2}
    | node {a, l, r} -> f (f {min a x.1, max a x.2} l) r
    end
);

spec = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf x -> {x, x}
    | node {a, l, r} -> 
        let result = (g {a, a} l) in 
            g {result.1, result.2} r
    end
);

repr = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      leaf a -> 
        let tmp1 = (leaf a) in 
            tmp1
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {a, tmp2, tmp3}
    end
);

main = \t: Tree. 
    let tmp4 = (repr t) in 
        spec tmp4;

repr_ = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      leaf a -> {a, a}
    | node {a, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {min tmp2.1 (min tmp3.1 a), max tmp2.2 (max tmp3.2 a)}
    end
);

main_ = \t: Tree. 
    let tmp4 = (repr_ t) in 
        {tmp4.1, tmp4.2};
