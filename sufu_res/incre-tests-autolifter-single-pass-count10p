
Inductive List = cons {Bool, List} | nil Unit;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            v tmp2;

inf = 100;

count10p = fix (
    \f: Bool -> Bool -> List -> Int. \s0: Bool. \s1: Bool. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let upd = (if (and s1 h) then 1
        else 0) in 
            let s1 = (and (not h) (or s0 s1)) in 
                let s0 = h in 
                    + upd (f s0 s1 t)
    end
) false false;

main = single_pass count10p;

@Combine @Align al_true = true;

@Combine @Align al_false = false;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_false
    | cons {h, _} -> h
    end
;

single_pass_ = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            let c0 = (al_head t) in 
                {if (or (or (not h) (== tmp1.1 tmp1.2)) c0) then tmp1.1
                else + 1 tmp1.1, if (not h) then tmp1.2
                else + 1 tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

main_ = single_pass_ count10p;
