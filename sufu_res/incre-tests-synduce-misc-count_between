
Inductive Tree = leaf Int | node {Int, Tree, Tree};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

min = \a: Int. \b: Int. 
    if (< a b) then a
    else b;

tmin = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> min w (min (f l) (f r))
    end
);

tmax = fix (
    \f: Tree -> Int. \t: Tree. 
    match t with
      leaf w -> w
    | node {w, l, r} -> max w (max (f l) (f r))
    end
);

repr = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      leaf w -> 
        let tmp1 = (leaf w) in 
            tmp1
    | node {w, l, r} -> if (>= w global1) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {w, tmp2, tmp3}
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                node {w, tmp4, tmp5}
    end
);

spec = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> Bool. \t: Tree. 
    match t with
      leaf w -> and (< global0 w) (< w global1)
    | node {w, l, r} -> or (or (and (< global0 w) (< w global1)) (f l)) (f r)
    end
);

main = \global0: Int. \global1: Int. \t: Tree. 
    if (< global0 global1) then let tmp6 = (repr global0 global1 t) in 
        spec global0 global1 tmp6
    else false;

repr_ = \global0: Int. \global1: Int. 
    fix (
    \f: Tree -> {Bool, Int}. \t: Tree. 
    match t with
      leaf w -> 
        let c0 = (- w global0) in 
            let c1 = (- w global1) in 
                {and (< c1 0) (< 0 c0), global0}
    | node {w, l, r} -> if (>= w global1) then let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {or tmp2.1 tmp3.1, global0}
        else let tmp4 = (f l) in 
            let tmp5 = (f r) in 
                {or (or (< tmp5.2 w) tmp4.1) tmp5.1, global0}
    end
);

main_ = \global0: Int. \global1: Int. \t: Tree. 
    if (< global0 global1) then let tmp6 = (repr_ global0 global1 t) in 
        tmp6.1
    else false;
