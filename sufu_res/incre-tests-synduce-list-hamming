
Inductive ZipCList = cnil Unit | single {Int, Int} | concat {ZipCList, ZipCList};

Inductive ZipList = nil Unit | cons {Int, Int, ZipList};

cat = fix (
    \f: ZipList -> ZipList -> ZipList. \xs: ZipList. \ys: ZipList. 
    match xs with
      nil _ -> ys
    | cons {a, b, t} -> cons {a, b, f t ys}
    end
);

repr = fix (
    \f: ZipCList -> ZipList. \xs: ZipCList. 
    match xs with
      cnil _ -> 
        let tmp1 = (nil unit) in 
            tmp1
    | single {a, b} -> 
        let tmp2 = (cons {a, b, nil unit}) in 
            tmp2
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                cat tmp3 tmp4
    end
);

spec = fix (
    \f: ZipList -> Int. \xs: ZipList. 
    match xs with
      nil _ -> 0
    | cons {a, b, t} -> if (== a b) then + 1 (f t)
        else f t
    end
);

main = \xs: ZipCList. 
    let tmp5 = (repr xs) in 
        spec tmp5;

repr_ = fix (
    \f: ZipCList -> Int. \xs: ZipCList. 
    match xs with
      cnil _ -> 0
    | single {a, b} -> 
        let c0 = (- b a) in 
            if (== c0 0) then 1
            else 0
    | concat {a, b} -> 
        let tmp3 = (f a) in 
            let tmp4 = (f b) in 
                + tmp3 tmp4
    end
);

main_ = \xs: ZipCList. 
    let tmp5 = (repr_ xs) in 
        tmp5;
