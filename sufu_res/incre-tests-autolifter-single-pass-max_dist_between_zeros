
Inductive List = cons {Bool, List} | nil Unit;

single_pass = \v: List -> Int. 
    let run = (fix (
    \f: List -> List. \xs: List. 
    match xs with
      nil _ -> xs
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            cons {h, tmp1}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            v tmp2;

inf = 100;

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

max_dist_between_zeros = fix (
    \f: Int -> List -> Int. \cs: Int. \xs: List. 
    match xs with
      nil _ -> 0
    | cons {h, t} -> 
        let cs = (if (not h) then 0
        else + cs 1) in 
            max cs (f cs t)
    end
) 0;

main = single_pass max_dist_between_zeros;

@Combine @Align al_true = true;

@Combine @Align al_false = false;

@Extract @Align al_head = \xs: List. 
    match xs with
      nil _ -> al_false
    | cons {h, _} -> h
    end
;

single_pass_ = \v: List -> Int. 
    let run = (fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let tmp1 = (f t) in 
            {if (or (not h) (< tmp1.2 tmp1.1)) then tmp1.1
            else + 1 tmp1.1, if (not h) then 0
            else + 1 tmp1.2}
    end
)) in 
        \xs: List. 
        let tmp2 = (run xs) in 
            tmp2.1;

main_ = single_pass_ max_dist_between_zeros;
