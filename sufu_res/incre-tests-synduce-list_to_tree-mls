
Inductive Tree = empty Unit | node {Int, Tree, Tree};

Inductive List = nil Unit | cons {Int, List};

max = \a: Int. \b: Int. 
    if (< a b) then b
    else a;

cat = fix (
    \f: List -> List -> List. \x: List. \y: List. 
    match x with
      cons {h, t} -> cons {h, f t y}
    | nil _ -> y
    end
);

repr = let dec = (fix (
    \f: List -> Tree -> List. \res: List. \t: Tree. 
    match t with
      empty _ -> res
    | node {w, l, r} -> cons {w, f (f res l) r}
    end
)) in 
        fix (
        \f: Tree -> List. \t: Tree. 
        match t with
          empty _ -> nil unit
        | node {w, l, r} -> cons {w, dec (f l) r}
        end
    );

target = fix (
    \f: Tree -> Tree. \t: Tree. 
    match t with
      empty _ -> 
        let tmp1 = (empty unit) in 
            tmp1
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                node {w, tmp2, tmp3}
    end
);

spec = fix (
    \f: List -> {Int, Int}. \xs: List. 
    match xs with
      nil _ -> {0, 0}
    | cons {h, t} -> 
        let result = (f t) in 
            {+ h result.1, max result.2 (+ h result.1)}
    end
);

main = \xs: Tree. 
    let tmp4 = (target xs) in 
        spec (repr tmp4);

target_ = fix (
    \f: Tree -> {Int, Int}. \t: Tree. 
    match t with
      empty _ -> {0, 0}
    | node {w, l, r} -> 
        let tmp2 = (f l) in 
            let tmp3 = (f r) in 
                {+ (+ tmp3.1 tmp2.1) w, if (< (max (+ tmp3.2 tmp2.1) tmp2.2) (+ tmp3.1 (max (+ tmp2.1 w) tmp2.1))) then + tmp3.1 (max (+ tmp2.1 w) tmp2.1)
                else max (+ tmp3.2 tmp2.1) tmp2.2}
    end
);

main_ = \xs: Tree. 
    let tmp4 = (target_ xs) in 
        {tmp4.1, tmp4.2};
